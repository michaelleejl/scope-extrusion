\relax 
\providecommand\zref@newlabel[2]{}
\providecommand*\new@tpo@label[2]{}
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\providecommand\BKM@entry[2]{}
\bibstyle{abbrvnat}
\providecommand \oddpage@label [2]{}
\BKM@entry{id=1,dest={636861707465722E31},srcline={1}}{5C3337365C3337375C303030495C3030306E5C303030745C303030725C3030306F5C303030645C303030755C303030635C303030745C303030695C3030306F5C3030306E}
\citation{rice-53}
\citation{robinson-01}
\citation{abrahams-04}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction}{1}{chapter.1}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\citation{pretnar-15}
\citation{sivaramakrishnan-21}
\citation{kiselyov-14}
\citation{kiselyov-16,isoda-24}
\citation{calcagno-00}
\citation{kiselyov-14}
\BKM@entry{id=2,dest={73656374696F6E2E312E31},srcline={69}}{5C3337365C3337375C303030435C3030306F5C3030306E5C303030745C303030725C303030695C303030625C303030755C303030745C303030695C3030306F5C3030306E5C30303073}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Contributions}{3}{section.1.1}\protected@file@percent }
\BKM@entry{id=3,dest={636861707465722E32},srcline={1}}{5C3337365C3337375C303030425C303030615C303030635C3030306B5C303030675C303030725C3030306F5C303030755C3030306E5C30303064}
\BKM@entry{id=4,dest={73656374696F6E2E322E31},srcline={1}}{5C3337365C3337375C3030304D5C303030655C303030745C303030615C303030705C303030725C3030306F5C303030675C303030725C303030615C3030306D5C3030306D5C303030695C3030306E5C30303067}
\BKM@entry{id=5,dest={73756273656374696F6E2E322E312E31},srcline={4}}{}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Background}{4}{chapter.2}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Metaprogramming}{4}{section.2.1}\protected@file@percent }
\newlabel{section:metaprogramming-technical}{{2.1}{4}{Metaprogramming}{section.2.1}{}}
\newlabel{section:metaprogramming-technical@cref}{{[section][1][2]2.1}{[1][4][]4}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Metaprogramming for Fast and Maintainable Code}{4}{subsection.2.1.1}\protected@file@percent }
\newlabel{subsection:metaprogramming-motivation}{{2.1.1}{4}{Metaprogramming for Fast and Maintainable Code}{subsection.2.1.1}{}}
\newlabel{subsection:metaprogramming-motivation@cref}{{[subsection][1][2,1]2.1.1}{[1][4][]4}{}{}{}}
\citation{tratt-2008}
\citation{yallop-2023}
\citation{servetto-2013}
\citation{wickham-2019}
\citation{vandebon-2021}
\citation{rice-53}
\citation{robinson-01}
\@writefile{lol}{\contentsline {listing}{\numberline {1}{\ignorespaces A maintainable implementation of \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad}}}}{5}{listing.1}\protected@file@percent }
\newlabel{listing:ocaml-grad-main}{{1}{5}{A maintainable implementation of \mintinline {ocaml}{grad}}{listing.1}{}}
\newlabel{listing:ocaml-grad-main@cref}{{[listing][1][]1}{[1][5][]5}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {2}{\ignorespaces A fast implementation of \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad}}, assuming $f =$ \text  {\FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{Compose(Tanh, Sin)}}}}}{5}{listing.2}\protected@file@percent }
\newlabel{listing:ocaml-grad-fast}{{2}{5}{A fast implementation of \mintinline {ocaml}{grad}, assuming $f =$ \text {\mintinline {ocaml}{Compose(Tanh, Sin)}}}{listing.2}{}}
\newlabel{listing:ocaml-grad-fast@cref}{{[listing][2][]2}{[1][5][]5}{}{}{}}
\citation{jax-grad-metaprogramming}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Speeding up exponentiation with Metaprogramming}{6}{subsubsection*.4}\protected@file@percent }
\@writefile{lol}{\contentsline {listing}{\numberline {3}{\ignorespaces A maintainable implementation of an exponentiation function}}{6}{listing.3}\protected@file@percent }
\newlabel{listing:ocaml-pow-maintainable}{{3}{6}{A maintainable implementation of an exponentiation function}{listing.3}{}}
\newlabel{listing:ocaml-pow-maintainable@cref}{{[listing][3][]3}{[1][6][]6}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {4}{\ignorespaces An efficient implementation of exponentiation, assuming \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{n}} $=$ \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{2}}}}{6}{listing.4}\protected@file@percent }
\newlabel{listing:ocaml-pow-fast}{{4}{6}{An efficient implementation of exponentiation, assuming \mintinline {ocaml}{n} $=$ \mintinline {ocaml}{2}}{listing.4}{}}
\newlabel{listing:ocaml-pow-fast@cref}{{[listing][4][]4}{[1][6][]6}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {5}{\ignorespaces A meta-programmed \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{pow_gen}} function, which resembles \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{pow}} but generates \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{square}}}}{7}{listing.5}\protected@file@percent }
\newlabel{listing:ocaml-pow-gen}{{5}{7}{A meta-programmed \mintinline {ocaml}{pow_gen} function, which resembles \mintinline {ocaml}{pow} but generates \mintinline {ocaml}{square}}{listing.5}{}}
\newlabel{listing:ocaml-pow-gen@cref}{{[listing][5][]5}{[1][7][]7}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {6}{\ignorespaces In \texttt  {MacoCaml}, \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {\macocamlLexer }{macro}} allows for definitions to be shared across top-level splices}}{8}{listing.6}\protected@file@percent }
\newlabel{listing:ocaml-macros}{{6}{8}{In \texttt {MacoCaml}, \mintinline {\macocamlLexer }{macro} allows for definitions to be shared across top-level splices}{listing.6}{}}
\newlabel{listing:ocaml-macros@cref}{{[listing][6][]6}{[1][8][]8}{}{}{}}
\BKM@entry{id=6,dest={73756273656374696F6E2E322E312E32},srcline={171}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030445C303030655C303030735C303030695C303030675C3030306E5C3030305C3034305C303030535C303030705C303030615C303030635C303030655C3030305C3034305C3030306F5C303030665C3030305C3034305C3030304D5C303030655C303030745C303030615C3030306C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C30303073}
\citation{kiselyov-2024}
\citation{mainland-2012}
\citation{kiselyov-14}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.2}The Design Space of Metalanguages}{9}{subsection.2.1.2}\protected@file@percent }
\newlabel{subsection:metaprogramming-design}{{2.1.2}{9}{The Design Space of Metalanguages}{subsection.2.1.2}{}}
\newlabel{subsection:metaprogramming-design@cref}{{[subsection][2][2,1]2.1.2}{[1][9][]9}{}{}{}}
\citation{xie-2023}
\citation{chiang-2024}
\citation{inoue-2012}
\citation{isoda-24,kiselyov-16}
\BKM@entry{id=7,dest={73656374696F6E2E322E32},srcline={1}}{5C3337365C3337375C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{pretnar-15}
\BKM@entry{id=8,dest={73756273656374696F6E2E322E322E31},srcline={4}}{5C3337365C3337375C303030435C3030306F5C3030306D5C303030705C3030306F5C303030735C303030615C303030625C3030306C5C303030655C3030305C3034305C303030615C3030306E5C303030645C3030305C3034305C303030435C303030755C303030735C303030745C3030306F5C3030306D5C303030695C303030735C303030615C303030625C3030306C5C303030655C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C30303073}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Effect Handlers}{10}{section.2.2}\protected@file@percent }
\newlabel{section:effects-technical}{{2.2}{10}{Effect Handlers}{section.2.2}{}}
\newlabel{section:effects-technical@cref}{{[section][2][2]2.2}{[1][10][]10}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}Composable and Customisable Effects}{10}{subsection.2.2.1}\protected@file@percent }
\newlabel{subsection:effect-handler-motivation}{{2.2.1}{10}{Composable and Customisable Effects}{subsection.2.2.1}{}}
\newlabel{subsection:effect-handler-motivation@cref}{{[subsection][1][2,2]2.2.1}{[1][10][]10}{}{}{}}
\citation{kiselyov-2012}
\citation{sivaramakrishnan-21}
\BKM@entry{id=9,dest={73756273656374696F6E2E322E322E32},srcline={57}}{5C3337365C3337375C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030303A5C3030305C3034305C303030415C3030305C3034305C303030435C303030615C3030306C5C303030635C303030755C3030306C5C303030755C303030735C3030305C3034305C303030665C3030306F5C303030725C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{pretnar-15}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces The syntax of $\lambda _{\texttt  {op}}$. Terms are syntactically divided into values $v$, computations $c$, and handlers $h$ }}{13}{figure.2.1}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:eff-lang-syntax}{{2.1}{13}{The syntax of \efflang . Terms are syntactically divided into values $v$, computations $c$, and handlers $h$}{figure.2.1}{}}
\newlabel{fig:eff-lang-syntax@cref}{{[figure][1][2]2.1}{[1][13][]13}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.2}$\lambda _{\texttt  {op}}${}: A Calculus for Effect Handlers}{13}{subsection.2.2.2}\protected@file@percent }
\newlabel{subsection:effect-handler-calculus}{{2.2.2}{13}{\texorpdfstring {\efflang {}}{Lambda-Op}: A Calculus for Effect Handlers}{subsection.2.2.2}{}}
\newlabel{subsection:effect-handler-calculus@cref}{{[subsection][2][2,2]2.2.2}{[1][12][]13}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {7}{\ignorespaces An $\lambda _{\texttt  {op}}${} program that returns $(\texttt  {3}, \texttt  {"1;2"})$. It will be used as a running example throughout this section.}}{13}{listing.7}\protected@file@percent }
\newlabel{listing:efflang-running-example}{{7}{13}{An \efflang {} program that returns $(\texttt {3}, \texttt {"1;2"})$. It will be used as a running example throughout this section}{listing.7}{}}
\newlabel{listing:efflang-running-example@cref}{{[listing][7][]7}{[1][13][]13}{}{}{}}
\citation{pretnar-15}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Sequencing computations: \texttt  {do} and \texttt  {return}}{14}{subsubsection*.6}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Performing effects: \texttt  {op}, \texttt  {handle}, and \texttt  {continue}}{14}{subsubsection*.8}\protected@file@percent }
\citation{felleisen-87}
\citation{kiselyov-2012}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Operational Semantics}{16}{subsubsection*.10}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces The operational semantics of $\lambda _{\texttt  {op}}$. The semantics is given on configurations of the form $\langle c, E \rangle $, with the brackets dropped for clarity. Rules are divided into three classes: reduction rules $\textsc  {Red-}X$, which perform computation, congruence rules $\textsc  {Cng-}Y$ which manipulate the evaluation context, and effect rules $\textsc  {Eff-}Z$ that are special to $\lambda _{\texttt  {op}}$}}{16}{figure.2.2}\protected@file@percent }
\newlabel{fig:efflang-opsem}{{2.2}{16}{The operational semantics of \efflang . The semantics is given on configurations of the form $\langle c, E \rangle $, with the brackets dropped for clarity. Rules are divided into three classes: reduction rules $\textsc {Red-}X$, which perform computation, congruence rules $\textsc {Cng-}Y$ which manipulate the evaluation context, and effect rules $\textsc {Eff-}Z$ that are special to \efflang }{figure.2.2}{}}
\newlabel{fig:efflang-opsem@cref}{{[figure][2][2]2.2}{[1][16][]16}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces $\lambda _{\texttt  {op}}${} types. Notice that, just as terms are divided into values, computations, and handlers, types are divided into value types ($T$), computation types ($\effectType {T}$), and handler types ($\effectType {T_1} \DOTSB \Relbar \joinrel \Rightarrow \effectType [\Delta ']{T_2}$)}}{18}{figure.2.3}\protected@file@percent }
\newlabel{fig:efflang-type-syntax}{{2.3}{18}{\efflang {} types. Notice that, just as terms are divided into values, computations, and handlers, types are divided into value types ($T$), computation types ($\effectType {T}$), and handler types ($\handlerType {\effectType {T_1}}{\effectType [\Delta ']{T_2}}$)}{figure.2.3}{}}
\newlabel{fig:efflang-type-syntax@cref}{{[figure][3][2]2.3}{[1][17][]18}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Type-and-Effect System}{18}{subsubsection*.12}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces Typing rules for $\lambda _{\texttt  {op}}${} terms}}{19}{figure.2.4}\protected@file@percent }
\newlabel{fig:efflang-type-system}{{2.4}{19}{Typing rules for \efflang {} terms}{figure.2.4}{}}
\newlabel{fig:efflang-type-system@cref}{{[figure][4][2]2.4}{[1][19][]19}{}{}{}}
\citation{bauer-2014}
\citation{levy-2003}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Metatheory}{21}{subsubsection*.14}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-1}{\default{2.2.2}\page{21}\abspage{25}\mdf@pagevalue{21}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{2.2.{1}}{Progress}}{21}{mdtheorem.2.2.1}\protected@file@percent }
\newlabel{thm:progress}{{2.2.{1}}{21}{Metatheory}{mdtheorem.2.2.1}{}}
\newlabel{thm:progress@cref}{{[mdtheorem][1][2,2]2.2.{1}}{[1][21][]21}{}{}{}}
\zref@newlabel{mdf@pagelabel-2}{\default{2.2.2}\page{21}\abspage{25}\mdf@pagevalue{21}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{2.2.{2}}{Preservation}}{21}{mdtheorem.2.2.2}\protected@file@percent }
\newlabel{thm:preservation}{{2.2.{2}}{21}{Metatheory}{mdtheorem.2.2.2}{}}
\newlabel{thm:preservation@cref}{{[mdtheorem][2][2,2]2.2.{2}}{[1][21][]21}{}{}{}}
\zref@newlabel{mdf@pagelabel-3}{\default{2.2.2}\page{21}\abspage{25}\mdf@pagevalue{21}}
\@writefile{thm}{\contentsline {mdcorollary}{{Corollary}{2.2.{1}}{Type Safety}}{21}{mdcorollary.2.2.1}\protected@file@percent }
\newlabel{thm:type-safety}{{2.2.{1}}{21}{Metatheory}{mdcorollary.2.2.1}{}}
\newlabel{thm:type-safety@cref}{{[mdcorollary][1][2,2]2.2.{1}}{[1][21][]21}{}{}{}}
\BKM@entry{id=10,dest={73756273656374696F6E2E322E322E33},srcline={540}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030445C303030655C303030735C303030695C303030675C3030306E5C3030305C3034305C303030535C303030705C303030615C303030635C303030655C3030305C3034305C3030306F5C303030665C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{xie-2022}
\citation{xie-2022}
\zref@newlabel{mdf@pagelabel-4}{\default{2.2.2}\page{22}\abspage{26}\mdf@pagevalue{22}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{2.2.{1}}{Contextual Equivalence}}{22}{mddefinition.2.2.1}\protected@file@percent }
\newlabel{dfn:ctx-equiv}{{2.2.{1}}{22}{Metatheory}{mddefinition.2.2.1}{}}
\newlabel{dfn:ctx-equiv@cref}{{[mddefinition][1][2,2]2.2.{1}}{[1][21][]22}{}{}{}}
\zref@newlabel{mdf@pagelabel-5}{\default{2.2.2}\page{22}\abspage{26}\mdf@pagevalue{22}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{2.2.{3}}{Fine-Grained CBV}}{22}{mdtheorem.2.2.3}\protected@file@percent }
\newlabel{thm:fine-grained-cbv}{{2.2.{3}}{22}{Metatheory}{mdtheorem.2.2.3}{}}
\newlabel{thm:fine-grained-cbv@cref}{{[mdtheorem][3][2,2]2.2.{3}}{[1][22][]22}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.3}The Design Space of Effect Handlers}{22}{subsection.2.2.3}\protected@file@percent }
\newlabel{subsection:effect-handler-design}{{2.2.3}{22}{The Design Space of Effect Handlers}{subsection.2.2.3}{}}
\newlabel{subsection:effect-handler-design@cref}{{[subsection][3][2,2]2.2.3}{[1][22][]22}{}{}{}}
\citation{hillestrom-2018}
\citation{phipps-costin-2023}
\citation{isoda-24}
\citation{phipps-costin-2023}
\citation{phipps-costin-2023}
\BKM@entry{id=11,dest={73656374696F6E2E322E33},srcline={1}}{5C3337365C3337375C303030535C303030635C3030306F5C303030705C303030655C3030305C3034305C303030455C303030785C303030745C303030725C303030755C303030735C303030695C3030306F5C3030306E}
\citation{kiselyov-14,kiselyov-16}
\citation{kiselyov-16}
\citation{kiselyov-14}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Scope Extrusion}{24}{section.2.3}\protected@file@percent }
\newlabel{section:scope-extrusion-technical}{{2.3}{24}{Scope Extrusion}{section.2.3}{}}
\newlabel{section:scope-extrusion-technical@cref}{{[section][3][2]2.3}{[1][24][]24}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {8}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that evaluates to the $\texttt  {Var}(x_{\mathbb  {N}})$. The AST is ill-scoped, and thus exhibits scope extrusion. It will be used as a running example.}}{24}{listing.8}\protected@file@percent }
\newlabel{listing:efflang-scope-extrusion}{{8}{24}{A \efflang {} program that evaluates to the $\Var {x}{\mathbb {N}}$. The AST is ill-scoped, and thus exhibits scope extrusion. It will be used as a running example}{listing.8}{}}
\newlabel{listing:efflang-scope-extrusion@cref}{{[listing][8][]8}{[1][24][]24}{}{}{}}
\BKM@entry{id=12,dest={73756273656374696F6E2E322E332E31},srcline={56}}{}
\citation{kiselyov-16,isoda-24}
\citation{kiselyov-14}
\citation{kiselyov-14}
\@writefile{lol}{\contentsline {listing}{\numberline {9}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that is a slight variation of \Cref  {listing:efflang-maybe-scope-extrusion}, but that (unlike \Cref  {listing:efflang-maybe-scope-extrusion}) passes the Eager Dynamic Check.}}{25}{listing.9}\protected@file@percent }
\newlabel{listing:efflang-maybe-not-scope-extrusion}{{9}{25}{A \efflang {} program that is a slight variation of \Cref {listing:efflang-maybe-scope-extrusion}, but that (unlike \Cref {listing:efflang-maybe-scope-extrusion}) passes the Eager Dynamic Check}{listing.9}{}}
\newlabel{listing:efflang-maybe-not-scope-extrusion@cref}{{[listing][9][]9}{[1][25][]25}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Existing Solutions to the Scope Extrusion Problem}{25}{subsection.2.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Lazy Dynamic Check}{25}{subsubsection*.16}\protected@file@percent }
\citation{kiselyov-14}
\@writefile{lol}{\contentsline {listing}{\numberline {10}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that evaluates to the $\texttt  {Var}(x_{\mathbb  {N}})$. Executing the entire program to determine if it exhibits scope extrusion is inefficient.}}{26}{listing.10}\protected@file@percent }
\newlabel{listing:efflang-lazy-scope-extrusion-inefficient}{{10}{26}{A \efflang {} program that evaluates to the $\Var {x}{\mathbb {N}}$. Executing the entire program to determine if it exhibits scope extrusion is inefficient}{listing.10}{}}
\newlabel{listing:efflang-lazy-scope-extrusion-inefficient@cref}{{[listing][10][]10}{[1][26][]26}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Eager Dynamic Check}{26}{subsubsection*.18}\protected@file@percent }
\@writefile{lol}{\contentsline {listing}{\numberline {11}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that may, or may not demonstrate scope extrusion, depending on one's definition. The final result of the program is well-scoped, but not all intermediate results are well-scoped. If scope extrusion is a property of the resulting AST, then this does not display scope extrusion. If, instead, it is a property of intermediate ASTs, then this does display scope extrusion.}}{26}{listing.11}\protected@file@percent }
\newlabel{listing:efflang-maybe-scope-extrusion}{{11}{26}{A \efflang {} program that may, or may not demonstrate scope extrusion, depending on one's definition. The final result of the program is well-scoped, but not all intermediate results are well-scoped. If scope extrusion is a property of the resulting AST, then this does not display scope extrusion. If, instead, it is a property of intermediate ASTs, then this does display scope extrusion}{listing.11}{}}
\newlabel{listing:efflang-maybe-scope-extrusion@cref}{{[listing][11][]11}{[1][26][]26}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Refined Environment Classifiers}{27}{subsubsection*.20}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.5}{\ignorespaces The AST of $(\lambda f. \lambda x. f x) (\lambda y.y)$, where each scope is labelled with the corresponding environment classifier.}}{28}{figure.2.5}\protected@file@percent }
\newlabel{fig:refined-enviroment-classifiers-basic}{{2.5}{28}{The AST of $(\lambda f. \lambda x. f x) (\lambda y.y)$, where each scope is labelled with the corresponding environment classifier}{figure.2.5}{}}
\newlabel{fig:refined-enviroment-classifiers-basic@cref}{{[figure][5][2]2.5}{[1][27][]28}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.6}{\ignorespaces Visual depiction of the \textsc  {(C-Abs)} typing rule.}}{29}{figure.2.6}\protected@file@percent }
\newlabel{fig:cref-typing-rule}{{2.6}{29}{Visual depiction of the \textsc {(C-Abs)} typing rule}{figure.2.6}{}}
\newlabel{fig:cref-typing-rule@cref}{{[figure][6][2]2.6}{[1][29][]29}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.7}{\ignorespaces The ``AST'' of the scope extrusion example, \Cref  {listing:efflang-scope-extrusion}. Notice that in place of AST nodes, we may now have compile-time executable code that \textit  {evaluate} to AST nodes.}}{30}{figure.2.7}\protected@file@percent }
\newlabel{fig:classifier-ast-scope-extrusion}{{2.7}{30}{The ``AST'' of the scope extrusion example, \Cref {listing:efflang-scope-extrusion}. Notice that in place of AST nodes, we may now have compile-time executable code that \textit {evaluate} to AST nodes}{figure.2.7}{}}
\newlabel{fig:classifier-ast-scope-extrusion@cref}{{[figure][7][2]2.7}{[1][29][]30}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {12}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that passes the Eager and Lazy Dynamic Checks, but is not well-typed under the Refined Environment Classifiers type system.}}{30}{listing.12}\protected@file@percent }
\newlabel{listing:efflang-no-scope-extrusion}{{12}{30}{A \efflang {} program that passes the Eager and Lazy Dynamic Checks, but is not well-typed under the Refined Environment Classifiers type system}{listing.12}{}}
\newlabel{listing:efflang-no-scope-extrusion@cref}{{[listing][12][]12}{[1][30][]30}{}{}{}}
\BKM@entry{id=13,dest={636861707465722E33},srcline={3}}{5C3337365C3337375C303030435C303030615C3030306C5C303030635C303030755C3030306C5C303030755C30303073}
\citation{xie-2023}
\BKM@entry{id=14,dest={73656374696F6E2E332E31},srcline={44}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030735C3030306F5C303030755C303030725C303030635C303030655C3030305C3034305C3030306C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C3030303A5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030515C303030755C3030306F5C303030745C303030655C3030302D5C303030535C303030705C3030306C5C303030695C303030635C30303065}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Calculus}{31}{chapter.3}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces $\lambda _{\equote [\texttt  {op}]}${} is first elaborated into $\lambda _{\texttt  {AST}(\texttt  {op})}${}, which is then executed \textbf  {at compile-time} to obtain the AST of a run-time program.}}{31}{figure.3.1}\protected@file@percent }
\newlabel{fig:elaboration-then-execution}{{3.1}{31}{\calculusName {} is first elaborated into \coreLang {}, which is then executed \textbf {at compile-time} to obtain the AST of a run-time program}{figure.3.1}{}}
\newlabel{fig:elaboration-then-execution@cref}{{[figure][1][3]3.1}{[1][31][]31}{}{}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}The source language: $\lambda _{\equote [\texttt  {op}]}${}}{31}{section.3.1}\protected@file@percent }
\newlabel{section:source-lang}{{3.1}{31}{The source language: \texorpdfstring {\sourceLang {}}{Lambda-Op-Quote-Splice}}{section.3.1}{}}
\newlabel{section:source-lang@cref}{{[section][1][3]3.1}{[1][31][]31}{}{}{}}
\BKM@entry{id=15,dest={73756273656374696F6E2E332E312E31},srcline={50}}{5C3337365C3337375C303030545C303030795C303030705C303030655C3030305C3034305C303030535C303030795C303030735C303030745C303030655C3030306D}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces $\lambda _{\equote [\texttt  {op}]}${} types. I highlight three important elements: first, stratifying types into two levels, $0$ and $-1$. Second, stratifying effects into two levels, $\xi $ (for run-time effects) and $\Delta $ for compile-time effects. Third, the \textsf  {Code} type at level $-1$ allows for compile-time programs to manipulate ASTs of run-time code.}}{32}{figure.3.2}\protected@file@percent }
\newlabel{fig:source-types}{{3.2}{32}{\sourceLang {} types. I highlight three important elements: first, stratifying types into two levels, $0$ and $-1$. Second, stratifying effects into two levels, $\xi $ (for run-time effects) and $\Delta $ for compile-time effects. Third, the \textsf {Code} type at level $-1$ allows for compile-time programs to manipulate ASTs of run-time code}{figure.3.2}{}}
\newlabel{fig:source-types@cref}{{[figure][2][3]3.2}{[1][32][]32}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}Type System}{32}{subsection.3.1.1}\protected@file@percent }
\citation{xie-2023}
\zref@newlabel{mdf@pagelabel-6}{\default{3.1.1}\page{33}\abspage{37}\mdf@pagevalue{33}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{3.1.{1}}{Level}}{33}{mddefinition.3.1.1}\protected@file@percent }
\citation{xie-2023}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Typing Judgement}{35}{subsubsection*.22}\protected@file@percent }
\BKM@entry{id=16,dest={73656374696F6E2E332E32},srcline={515}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030635C3030306F5C303030725C303030655C3030305C3034305C3030306C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C3030303A5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030415C303030535C30303054}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces Transitions between modes \textbf  {\textsf  {\textcolor {compile}{c}}}{}, \textbf  {\textsf  {\textcolor {splice}{s}}}{}, and \textbf  {\textsf  {\textcolor {quote}{q}}}{}. Top-level splices transition from \textbf  {\textsf  {\textcolor {compile}{c}}}{} to \textbf  {\textsf  {\textcolor {splice}{s}}}{}, quotes transition from \textbf  {\textsf  {\textcolor {splice}{s}}}{} to \textbf  {\textsf  {\textcolor {quote}{q}}}{}, and splices (under quotes) transition from \textbf  {\textsf  {\textcolor {quote}{q}}}{} to \textbf  {\textsf  {\textcolor {splice}{s}}}{}.}}{36}{figure.3.3}\protected@file@percent }
\newlabel{fig:compiler-mode-transitions}{{3.3}{36}{Transitions between modes \compilemode {}, \splicemode {}, and \quotemode {}. Top-level splices transition from \compilemode {} to \splicemode {}, quotes transition from \splicemode {} to \quotemode {}, and splices (under quotes) transition from \quotemode {} to \splicemode {}}{figure.3.3}{}}
\newlabel{fig:compiler-mode-transitions@cref}{{[figure][3][3]3.3}{[1][36][]36}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces The \textbf  {\textsf  {\textcolor {compile}{c}}}{}-mode and \textbf  {\textsf  {\textcolor {quote}{q}}}{}-mode typing rules for $\lambda _{\equote [\texttt  {op}]}${}. The rules are nearly identical to the $\lambda _{\texttt  {op}}${} typing rules, with the exception of level annotations on types, except that everything -- including values like $1$ -- are typed as compile-time computations. Further, two additional rules, \textsc  {(\textbf  {\textsf  {\textcolor {compile}{c}}}{}-Splice)} and \textsc  {(\textbf  {\textsf  {\textcolor {quote}{q}}}{}-Splice)} formalise the transition to \textbf  {\textsf  {\textcolor {splice}{s}}}{}-mode. The former is top-level splice and the latter is splice.}}{37}{figure.3.4}\protected@file@percent }
\newlabel{fig:source-cq-typing-rules}{{3.4}{37}{The \compilemode {}-mode and \quotemode {}-mode typing rules for \sourceLang {}. The rules are nearly identical to the \efflang {} typing rules, with the exception of level annotations on types, except that everything -- including values like $1$ -- are typed as compile-time computations. Further, two additional rules, \textsc {(\compilemode {}-Splice)} and \textsc {(\quotemode {}-Splice)} formalise the transition to \splicemode {}-mode. The former is top-level splice and the latter is splice}{figure.3.4}{}}
\newlabel{fig:source-cq-typing-rules@cref}{{[figure][4][3]3.4}{[1][36][]37}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces The \textbf  {\textsf  {\textcolor {splice}{s}}}{}-mode typing rules for $\lambda _{\equote [\texttt  {op}]}${}. The rules are exactly identical to the $\lambda _{\texttt  {op}}${} typing rules, with the exception of level annotations on types, and the additional \textsc  {(Quote)} rule, which makes level $0$ code available at compile-time. }}{38}{figure.3.5}\protected@file@percent }
\newlabel{fig:source-s-typing-rules}{{3.5}{38}{The \splicemode {}-mode typing rules for \sourceLang {}. The rules are exactly identical to the \efflang {} typing rules, with the exception of level annotations on types, and the additional \textsc {(Quote)} rule, which makes level $0$ code available at compile-time}{figure.3.5}{}}
\newlabel{fig:source-s-typing-rules@cref}{{[figure][5][3]3.5}{[1][36][]38}{}{}{}}
\BKM@entry{id=17,dest={73756273656374696F6E2E332E322E31},srcline={545}}{5C3337365C3337375C303030545C303030795C303030705C303030655C3030305C3034305C303030535C303030795C303030735C303030745C303030655C3030306D}
\BKM@entry{id=18,dest={73756273656374696F6E2E332E322E32},srcline={547}}{5C3337365C3337375C3030304F5C303030705C303030655C303030725C303030615C303030745C303030695C3030306F5C3030306E5C303030615C3030306C5C3030305C3034305C303030535C303030655C3030306D5C303030615C3030306E5C303030745C303030695C303030635C30303073}
\BKM@entry{id=19,dest={73656374696F6E2E332E33},srcline={550}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306F5C3030306E5C3030305C3034305C303030665C303030725C3030306F5C3030306D5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030515C303030755C3030306F5C303030745C303030655C3030302D5C303030535C303030705C3030306C5C303030695C303030635C303030655C3030305C3034305C303030745C3030306F5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030415C303030535C30303054}
\BKM@entry{id=20,dest={73656374696F6E2E332E34},srcline={552}}{5C3337365C3337375C3030304D5C303030655C303030745C303030615C303030745C303030685C303030655C3030306F5C303030725C30303079}
\bibdata{library}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}The core language: $\lambda _{\texttt  {AST}(\texttt  {op})}${}}{39}{section.3.2}\protected@file@percent }
\newlabel{section:core-lang}{{3.2}{39}{The core language: \texorpdfstring {\coreLang {}}{Lambda-Op-AST}}{section.3.2}{}}
\newlabel{section:core-lang@cref}{{[section][2][3]3.2}{[1][36][]39}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.1}Type System}{39}{subsection.3.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.2}Operational Semantics}{39}{subsection.3.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Elaboration from $\lambda _{\equote [\texttt  {op}]}${} to $\lambda _{\texttt  {AST}(\texttt  {op})}${}}{39}{section.3.3}\protected@file@percent }
\newlabel{section:elaboration}{{3.3}{39}{Elaboration from \texorpdfstring {\sourceLang {}}{Lambda-Op-Quote-Splice} to \texorpdfstring {\coreLang {}}{Lambda-Op-AST}}{section.3.3}{}}
\newlabel{section:elaboration@cref}{{[section][3][3]3.3}{[1][39][]39}{}{}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.4}Metatheory}{39}{section.3.4}\protected@file@percent }
\newlabel{section:metatheory}{{3.4}{39}{Metatheory}{section.3.4}{}}
\newlabel{section:metatheory@cref}{{[section][4][3]3.4}{[1][39][]39}{}{}{}}
\bibcite{abrahams-04}{{1}{2004}{{Abrahams and Gurtovoy}}{{}}}
\bibcite{bauer-2014}{{2}{2014}{{Bauer and Pretnar}}{{}}}
\bibcite{calcagno-00}{{3}{2000}{{Calcagno et~al.}}{{Calcagno, Moggi, and Taha}}}
\bibcite{chiang-2024}{{4}{2024}{{Chiang et~al.}}{{Chiang, Yallop, White, and Xie}}}
\bibcite{felleisen-87}{{5}{1987}{{Felleisen and Friedman}}{{}}}
\bibcite{hillestrom-2018}{{6}{2018}{{Hillerstr{\"o}m and Lindley}}{{}}}
\bibcite{inoue-2012}{{7}{2012}{{Inoue and Taha}}{{}}}
\bibcite{isoda-24}{{8}{2024}{{Isoda et~al.}}{{Isoda, Yokoyama, and Kameyama}}}
\bibcite{jax-grad-metaprogramming}{{9}{}{{Jax-Ml}}{{}}}
\bibcite{kiselyov-2012}{{10}{2012}{{Kiselyov}}{{}}}
\bibcite{kiselyov-14}{{11}{2014}{{Kiselyov}}{{}}}
\bibcite{kiselyov-2024}{{12}{2024}{{Kiselyov}}{{}}}
\bibcite{kiselyov-16}{{13}{2016}{{Kiselyov et~al.}}{{Kiselyov, Kameyama, and Sudo}}}
\bibcite{levy-2003}{{14}{2003}{{Levy et~al.}}{{Levy, Power, and Thielecke}}}
\bibcite{mainland-2012}{{15}{2012}{{Mainland}}{{}}}
\bibcite{phipps-costin-2023}{{16}{2023}{{Phipps-Costin et~al.}}{{Phipps-Costin, Rossberg, Guha, Leijen, Hillerstr\"{o}m, Sivaramakrishnan, Pretnar, and Lindley}}}
\bibcite{pretnar-15}{{17}{2015}{{Pretnar}}{{}}}
\bibcite{rice-53}{{18}{1953}{{Rice}}{{}}}
\bibcite{robinson-01}{{19}{2001}{{Robison}}{{}}}
\bibcite{servetto-2013}{{20}{2013}{{Servetto and Zucca}}{{}}}
\bibcite{sivaramakrishnan-21}{{21}{2021}{{Sivaramakrishnan et~al.}}{{Sivaramakrishnan, Dolan, White, Kelly, Jaffer, and Madhavapeddy}}}
\bibcite{tratt-2008}{{22}{2008}{{Tratt}}{{}}}
\bibcite{vandebon-2021}{{23}{2021}{{Vandebon et~al.}}{{Vandebon, Coutinho, Luk, and Nurvitadhi}}}
\bibcite{wickham-2019}{{24}{2019}{{Wickham}}{{}}}
\bibcite{xie-2022}{{25}{2022}{{Xie et~al.}}{{Xie, Cong, Ikemori, and Leijen}}}
\bibcite{xie-2023}{{26}{2023}{{Xie et~al.}}{{Xie, White, Nicole, and Yallop}}}
\bibcite{yallop-2023}{{27}{2023}{{Yallop et~al.}}{{Yallop, Xie, and Krishnaswami}}}
\xdef \mintedoldcachechecksum{\detokenize{BFC099041925353AA87C3E96C63226BD:146}}
\global\@namedef{scr@dte@chapter@lastmaxnumwidth}{11.8799pt}
\global\@namedef{scr@dte@section@lastmaxnumwidth}{19.79993pt}
\global\@namedef{scr@dte@subsection@lastmaxnumwidth}{28.79993pt}
\@writefile{toc}{\providecommand\tocbasic@end@toc@file{}\tocbasic@end@toc@file}
\gdef \@abspage@last{46}
