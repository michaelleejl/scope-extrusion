\relax 
\providecommand\zref@newlabel[2]{}
\providecommand*\new@tpo@label[2]{}
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\providecommand\BKM@entry[2]{}
\bibstyle{abbrvnat}
\providecommand \oddpage@label [2]{}
\BKM@entry{id=1,dest={636861707465722E31},srcline={1}}{5C3337365C3337375C303030495C3030306E5C303030745C303030725C3030306F5C303030645C303030755C303030635C303030745C303030695C3030306F5C3030306E}
\citation{rice-53}
\citation{robinson-01}
\citation{abrahams-04}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction}{1}{chapter.1}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\citation{pretnar-15}
\citation{sivaramakrishnan-21}
\citation{kiselyov-14}
\citation{kiselyov-16,isoda-24}
\citation{calcagno-00}
\citation{kiselyov-14}
\BKM@entry{id=2,dest={73656374696F6E2E312E31},srcline={69}}{5C3337365C3337375C303030435C3030306F5C3030306E5C303030745C303030725C303030695C303030625C303030755C303030745C303030695C3030306F5C3030306E5C30303073}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Contributions}{2}{section.1.1}\protected@file@percent }
\BKM@entry{id=3,dest={636861707465722E32},srcline={3}}{5C3337365C3337375C303030425C303030615C303030635C3030306B5C303030675C303030725C3030306F5C303030755C3030306E5C30303064}
\BKM@entry{id=4,dest={73656374696F6E2E322E31},srcline={1}}{5C3337365C3337375C3030304D5C303030655C303030745C303030615C303030705C303030725C3030306F5C303030675C303030725C303030615C3030306D5C3030306D5C303030695C3030306E5C30303067}
\BKM@entry{id=5,dest={73756273656374696F6E2E322E312E31},srcline={4}}{}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Background}{4}{chapter.2}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Metaprogramming}{4}{section.2.1}\protected@file@percent }
\newlabel{section:metaprogramming-technical}{{2.1}{4}{Metaprogramming}{section.2.1}{}}
\newlabel{section:metaprogramming-technical@cref}{{[section][1][2]2.1}{[1][4][]4}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Metaprogramming for Fast and Maintainable Code}{4}{subsection.2.1.1}\protected@file@percent }
\newlabel{subsection:metaprogramming-motivation}{{2.1.1}{4}{Metaprogramming for Fast and Maintainable Code}{subsection.2.1.1}{}}
\newlabel{subsection:metaprogramming-motivation@cref}{{[subsection][1][2,1]2.1.1}{[1][4][]4}{}{}{}}
\citation{tratt-2008}
\citation{yallop-2023}
\citation{servetto-2013}
\citation{wickham-2019}
\citation{vandebon-2021}
\citation{rice-53}
\citation{robinson-01}
\citation{jax-grad-metaprogramming}
\@writefile{lol}{\contentsline {listing}{\numberline {1}{\ignorespaces A maintainable implementation of \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad}}}}{5}{listing.1}\protected@file@percent }
\newlabel{listing:ocaml-grad-main}{{1}{5}{A maintainable implementation of \mintinline {ocaml}{grad}}{listing.1}{}}
\newlabel{listing:ocaml-grad-main@cref}{{[listing][1][]1}{[1][5][]5}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {2}{\ignorespaces A fast implementation of \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad}}, assuming $f =$ \text  {\FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{Compose(Tanh, Sin)}}}}}{5}{listing.2}\protected@file@percent }
\newlabel{listing:ocaml-grad-fast}{{2}{5}{A fast implementation of \mintinline {ocaml}{grad}, assuming $f =$ \text {\mintinline {ocaml}{Compose(Tanh, Sin)}}}{listing.2}{}}
\newlabel{listing:ocaml-grad-fast@cref}{{[listing][2][]2}{[1][5][]5}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Speeding up exponentiation with Metaprogramming}{6}{subsubsection*.4}\protected@file@percent }
\@writefile{lol}{\contentsline {listing}{\numberline {3}{\ignorespaces A maintainable implementation of an exponentiation function}}{6}{listing.3}\protected@file@percent }
\newlabel{listing:ocaml-pow-maintainable}{{3}{6}{A maintainable implementation of an exponentiation function}{listing.3}{}}
\newlabel{listing:ocaml-pow-maintainable@cref}{{[listing][3][]3}{[1][6][]6}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {4}{\ignorespaces An efficient implementation of exponentiation, assuming \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{n}} $=$ \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{2}}}}{6}{listing.4}\protected@file@percent }
\newlabel{listing:ocaml-pow-fast}{{4}{6}{An efficient implementation of exponentiation, assuming \mintinline {ocaml}{n} $=$ \mintinline {ocaml}{2}}{listing.4}{}}
\newlabel{listing:ocaml-pow-fast@cref}{{[listing][4][]4}{[1][6][]6}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {5}{\ignorespaces A meta-programmed \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{pow_gen}} function, which resembles \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{pow}} but generates \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{square}}}}{6}{listing.5}\protected@file@percent }
\newlabel{listing:ocaml-pow-gen}{{5}{6}{A meta-programmed \mintinline {ocaml}{pow_gen} function, which resembles \mintinline {ocaml}{pow} but generates \mintinline {ocaml}{square}}{listing.5}{}}
\newlabel{listing:ocaml-pow-gen@cref}{{[listing][5][]5}{[1][6][]6}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {6}{\ignorespaces In MacoCaml, \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {\macocamlLexer }{macro}} allows for definitions to be shared across top-level splices}}{7}{listing.6}\protected@file@percent }
\newlabel{listing:ocaml-macros}{{6}{7}{In MacoCaml, \mintinline {\macocamlLexer }{macro} allows for definitions to be shared across top-level splices}{listing.6}{}}
\newlabel{listing:ocaml-macros@cref}{{[listing][6][]6}{[1][7][]7}{}{}{}}
\BKM@entry{id=6,dest={73756273656374696F6E2E322E312E32},srcline={171}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030445C303030655C303030735C303030695C303030675C3030306E5C3030305C3034305C303030535C303030705C303030615C303030635C303030655C3030305C3034305C3030306F5C303030665C3030305C3034305C3030304D5C303030655C303030745C303030615C3030306C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C30303073}
\citation{kiselyov-2024}
\citation{mainland-2012}
\citation{kiselyov-14}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.2}The Design Space of Metalanguages}{8}{subsection.2.1.2}\protected@file@percent }
\newlabel{subsection:metaprogramming-design}{{2.1.2}{8}{The Design Space of Metalanguages}{subsection.2.1.2}{}}
\newlabel{subsection:metaprogramming-design@cref}{{[subsection][2][2,1]2.1.2}{[1][8][]8}{}{}{}}
\citation{xie-2023}
\citation{chiang-2024}
\citation{inoue-2012}
\citation{isoda-24,kiselyov-16}
\BKM@entry{id=7,dest={73656374696F6E2E322E32},srcline={1}}{5C3337365C3337375C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{pretnar-15}
\BKM@entry{id=8,dest={73756273656374696F6E2E322E322E31},srcline={4}}{5C3337365C3337375C303030435C3030306F5C3030306D5C303030705C3030306F5C303030735C303030615C303030625C3030306C5C303030655C3030305C3034305C303030615C3030306E5C303030645C3030305C3034305C303030435C303030755C303030735C303030745C3030306F5C3030306D5C303030695C303030735C303030615C303030625C3030306C5C303030655C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C30303073}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Effect Handlers}{9}{section.2.2}\protected@file@percent }
\newlabel{section:effects-technical}{{2.2}{9}{Effect Handlers}{section.2.2}{}}
\newlabel{section:effects-technical@cref}{{[section][2][2]2.2}{[1][9][]9}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}Composable and Customisable Effects}{9}{subsection.2.2.1}\protected@file@percent }
\newlabel{subsection:effect-handler-motivation}{{2.2.1}{9}{Composable and Customisable Effects}{subsection.2.2.1}{}}
\newlabel{subsection:effect-handler-motivation@cref}{{[subsection][1][2,2]2.2.1}{[1][9][]9}{}{}{}}
\citation{kiselyov-2012}
\citation{sivaramakrishnan-21}
\BKM@entry{id=9,dest={73756273656374696F6E2E322E322E32},srcline={58}}{5C3337365C3337375C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030303A5C3030305C3034305C303030415C3030305C3034305C303030435C303030615C3030306C5C303030635C303030755C3030306C5C303030755C303030735C3030305C3034305C303030665C3030306F5C303030725C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{pretnar-15}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.2}$\lambda _{\texttt  {op}}${}: A Calculus for Effect Handlers}{11}{subsection.2.2.2}\protected@file@percent }
\newlabel{subsection:effect-handler-calculus}{{2.2.2}{11}{\texorpdfstring {\efflang {}}{Lambda-Op}: A Calculus for Effect Handlers}{subsection.2.2.2}{}}
\newlabel{subsection:effect-handler-calculus@cref}{{[subsection][2][2,2]2.2.2}{[1][11][]11}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {7}{\ignorespaces An $\lambda _{\texttt  {op}}${} program that returns $(\texttt  {3}, \texttt  {"1;2"})$. It will be used as a running example throughout this section.}}{11}{listing.7}\protected@file@percent }
\citation{pretnar-15}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces The syntax of $\lambda _{\texttt  {op}}$. Terms are syntactically divided into values $v$, computations $c$, and handlers $h$ }}{12}{figure.2.1}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:eff-lang-syntax}{{2.1}{12}{The syntax of \efflang . Terms are syntactically divided into values $v$, computations $c$, and handlers $h$}{figure.2.1}{}}
\newlabel{fig:eff-lang-syntax@cref}{{[figure][1][2]2.1}{[1][12][]12}{}{}{}}
\newlabel{listing:efflang-running-example}{{7}{12}{An \efflang {} program that returns $(\texttt {3}, \texttt {"1;2"})$. It will be used as a running example throughout this section}{listing.7}{}}
\newlabel{listing:efflang-running-example@cref}{{[listing][7][]7}{[1][11][]12}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Sequencing computations: \texttt  {do} and \texttt  {return}}{12}{subsubsection*.6}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Performing effects: \texttt  {op}, \texttt  {handle}, and \texttt  {continue}}{13}{subsubsection*.8}\protected@file@percent }
\citation{felleisen-87}
\citation{kiselyov-2012}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Operational Semantics}{14}{subsubsection*.10}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces The operational semantics of $\lambda _{\texttt  {op}}$. The semantics is given on configurations of the form $\langle c, E \rangle $, with the brackets dropped for clarity. Rules are divided into three classes: reduction rules $\textsc  {Red-}X$, which perform computation, congruence rules $\textsc  {Cng-}Y$ which manipulate the evaluation context, and effect rules $\textsc  {Eff-}Z$ that are special to $\lambda _{\texttt  {op}}$}}{14}{figure.2.2}\protected@file@percent }
\newlabel{fig:efflang-opsem}{{2.2}{14}{The operational semantics of \efflang . The semantics is given on configurations of the form $\langle c, E \rangle $, with the brackets dropped for clarity. Rules are divided into three classes: reduction rules $\textsc {Red-}X$, which perform computation, congruence rules $\textsc {Cng-}Y$ which manipulate the evaluation context, and effect rules $\textsc {Eff-}Z$ that are special to \efflang }{figure.2.2}{}}
\newlabel{fig:efflang-opsem@cref}{{[figure][2][2]2.2}{[1][14][]14}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces $\lambda _{\texttt  {op}}${} types. Notice that, just as terms are divided into values, computations, and handlers, types are divided into value types ($T$), computation types ($\effectType {T}$), and handler types ($\effectType {T_1} \DOTSB \Relbar \joinrel \Rightarrow \effectType [\Delta ']{T_2}$)}}{16}{figure.2.3}\protected@file@percent }
\newlabel{fig:efflang-type-syntax}{{2.3}{16}{\efflang {} types. Notice that, just as terms are divided into values, computations, and handlers, types are divided into value types ($T$), computation types ($\effectType {T}$), and handler types ($\handlerType {\effectType {T_1}}{\effectType [\Delta ']{T_2}}$)}{figure.2.3}{}}
\newlabel{fig:efflang-type-syntax@cref}{{[figure][3][2]2.3}{[1][15][]16}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Type-and-Effect System}{16}{subsubsection*.12}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces Typing rules for $\lambda _{\texttt  {op}}${} terms}}{17}{figure.2.4}\protected@file@percent }
\newlabel{fig:efflang-type-system}{{2.4}{17}{Typing rules for \efflang {} terms}{figure.2.4}{}}
\newlabel{fig:efflang-type-system@cref}{{[figure][4][2]2.4}{[1][17][]17}{}{}{}}
\citation{bauer-2014}
\BKM@entry{id=10,dest={73756273656374696F6E2E322E322E33},srcline={560}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030445C303030655C303030735C303030695C303030675C3030306E5C3030305C3034305C303030535C303030705C303030615C303030635C303030655C3030305C3034305C3030306F5C303030665C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{xie-2022}
\citation{xie-2022}
\zref@newlabel{mdf@pagelabel-1}{\default{2.2.2}\page{19}\abspage{23}\mdf@pagevalue{19}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{2.2.{1}}{Well-typed computation}}{19}{mddefinition.2.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Metatheory}{19}{subsubsection*.14}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-2}{\default{2.2.2}\page{19}\abspage{23}\mdf@pagevalue{19}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{2.2.{1}}{Progress}}{19}{mdtheorem.2.2.1}\protected@file@percent }
\newlabel{thm:progress}{{2.2.{1}}{19}{Metatheory}{mdtheorem.2.2.1}{}}
\newlabel{thm:progress@cref}{{[mdtheorem][1][2,2]2.2.{1}}{[1][19][]19}{}{}{}}
\zref@newlabel{mdf@pagelabel-3}{\default{2.2.2}\page{19}\abspage{23}\mdf@pagevalue{19}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{2.2.{2}}{Preservation}}{19}{mdtheorem.2.2.2}\protected@file@percent }
\newlabel{thm:preservation}{{2.2.{2}}{19}{Metatheory}{mdtheorem.2.2.2}{}}
\newlabel{thm:preservation@cref}{{[mdtheorem][2][2,2]2.2.{2}}{[1][19][]19}{}{}{}}
\zref@newlabel{mdf@pagelabel-4}{\default{2.2.2}\page{19}\abspage{23}\mdf@pagevalue{19}}
\@writefile{thm}{\contentsline {mdcorollary}{{Corollary}{2.2.{1}}{Type Safety}}{19}{mdcorollary.2.2.1}\protected@file@percent }
\newlabel{thm:type-safety}{{2.2.{1}}{19}{Metatheory}{mdcorollary.2.2.1}{}}
\newlabel{thm:type-safety@cref}{{[mdcorollary][1][2,2]2.2.{1}}{[1][19][]19}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.3}The Design Space of Effect Handlers}{19}{subsection.2.2.3}\protected@file@percent }
\newlabel{subsection:effect-handler-design}{{2.2.3}{19}{The Design Space of Effect Handlers}{subsection.2.2.3}{}}
\newlabel{subsection:effect-handler-design@cref}{{[subsection][3][2,2]2.2.3}{[1][19][]19}{}{}{}}
\citation{hillestrom-2018}
\citation{phipps-costin-2023}
\citation{isoda-24}
\citation{phipps-costin-2023}
\citation{phipps-costin-2023}
\BKM@entry{id=11,dest={73656374696F6E2E322E33},srcline={1}}{5C3337365C3337375C303030535C303030635C3030306F5C303030705C303030655C3030305C3034305C303030455C303030785C303030745C303030725C303030755C303030735C303030695C3030306F5C3030306E}
\citation{kiselyov-14,kiselyov-16}
\citation{kiselyov-16}
\citation{kiselyov-14}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Scope Extrusion}{21}{section.2.3}\protected@file@percent }
\newlabel{section:scope-extrusion-technical}{{2.3}{21}{Scope Extrusion}{section.2.3}{}}
\newlabel{section:scope-extrusion-technical@cref}{{[section][3][2]2.3}{[1][21][]21}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {8}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that evaluates to the $\texttt  {Var}(x_{\mathbb  {N}})$. The AST is ill-scoped, and thus exhibits scope extrusion. It will be used as a running example.}}{21}{listing.8}\protected@file@percent }
\newlabel{listing:efflang-scope-extrusion}{{8}{21}{A \efflang {} program that evaluates to the $\Var {x}{\mathbb {N}}$. The AST is ill-scoped, and thus exhibits scope extrusion. It will be used as a running example}{listing.8}{}}
\newlabel{listing:efflang-scope-extrusion@cref}{{[listing][8][]8}{[1][21][]21}{}{}{}}
\BKM@entry{id=12,dest={73756273656374696F6E2E322E332E31},srcline={57}}{}
\citation{kiselyov-16,isoda-24}
\citation{kiselyov-14}
\citation{kiselyov-14}
\@writefile{lol}{\contentsline {listing}{\numberline {9}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that may, or may not demonstrate scope extrusion, depending on one's definition. The final result of the program is well-scoped, but not all intermediate results are well-scoped. If scope extrusion is a property of the resulting AST, then this does not display scope extrusion. If, instead, it is a property of intermediate ASTs, then this does display scope extrusion.}}{22}{listing.9}\protected@file@percent }
\newlabel{listing:efflang-maybe-scope-extrusion}{{9}{22}{A \efflang {} program that may, or may not demonstrate scope extrusion, depending on one's definition. The final result of the program is well-scoped, but not all intermediate results are well-scoped. If scope extrusion is a property of the resulting AST, then this does not display scope extrusion. If, instead, it is a property of intermediate ASTs, then this does display scope extrusion}{listing.9}{}}
\newlabel{listing:efflang-maybe-scope-extrusion@cref}{{[listing][9][]9}{[1][22][]22}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Existing Solutions to the Scope Extrusion Problem}{22}{subsection.2.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Lazy Dynamic Check}{22}{subsubsection*.16}\protected@file@percent }
\newlabel{subsubsection:lazy-dynamic-check}{{2.3.1}{22}{Lazy Dynamic Check}{subsubsection*.16}{}}
\newlabel{subsubsection:lazy-dynamic-check@cref}{{[subsection][1][2,3]2.3.1}{[1][22][]22}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {10}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that evaluates to the $\texttt  {Var}(x_{\mathbb  {N}})$. Executing the entire program to determine if it exhibits scope extrusion is inefficient.}}{22}{listing.10}\protected@file@percent }
\citation{kiselyov-14}
\newlabel{listing:efflang-lazy-scope-extrusion-inefficient}{{10}{23}{A \efflang {} program that evaluates to the $\Var {x}{\mathbb {N}}$. Executing the entire program to determine if it exhibits scope extrusion is inefficient}{listing.10}{}}
\newlabel{listing:efflang-lazy-scope-extrusion-inefficient@cref}{{[listing][10][]10}{[1][22][]23}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Eager Dynamic Check}{23}{subsubsection*.18}\protected@file@percent }
\newlabel{subsubsection:eager-dynamic-check}{{2.3.1}{23}{Eager Dynamic Check}{subsubsection*.18}{}}
\newlabel{subsubsection:eager-dynamic-check@cref}{{[subsection][1][2,3]2.3.1}{[1][23][]23}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {11}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that is a slight variation of \Cref  {listing:efflang-maybe-scope-extrusion}, but that (unlike \Cref  {listing:efflang-maybe-scope-extrusion}) passes the Eager Dynamic Check.}}{23}{listing.11}\protected@file@percent }
\newlabel{listing:efflang-maybe-not-scope-extrusion}{{11}{23}{A \efflang {} program that is a slight variation of \Cref {listing:efflang-maybe-scope-extrusion}, but that (unlike \Cref {listing:efflang-maybe-scope-extrusion}) passes the Eager Dynamic Check}{listing.11}{}}
\newlabel{listing:efflang-maybe-not-scope-extrusion@cref}{{[listing][11][]11}{[1][23][]23}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Refined Environment Classifiers}{23}{subsubsection*.20}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.5}{\ignorespaces The AST of $(\lambda f. \lambda x. f x) (\lambda y.y)$, where each scope is labelled with the corresponding environment classifier.}}{24}{figure.2.5}\protected@file@percent }
\newlabel{fig:refined-enviroment-classifiers-basic}{{2.5}{24}{The AST of $(\lambda f. \lambda x. f x) (\lambda y.y)$, where each scope is labelled with the corresponding environment classifier}{figure.2.5}{}}
\newlabel{fig:refined-enviroment-classifiers-basic@cref}{{[figure][5][2]2.5}{[1][24][]24}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.6}{\ignorespaces Visual depiction of the \textsc  {(C-Abs)} typing rule.}}{25}{figure.2.6}\protected@file@percent }
\newlabel{fig:cref-typing-rule}{{2.6}{25}{Visual depiction of the \textsc {(C-Abs)} typing rule}{figure.2.6}{}}
\newlabel{fig:cref-typing-rule@cref}{{[figure][6][2]2.6}{[1][25][]25}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.7}{\ignorespaces The ``AST'' of the scope extrusion example, \Cref  {listing:efflang-scope-extrusion}. Notice that in place of AST nodes, we may now have compile-time executable code that \textit  {evaluate} to AST nodes.}}{26}{figure.2.7}\protected@file@percent }
\newlabel{fig:classifier-ast-scope-extrusion}{{2.7}{26}{The ``AST'' of the scope extrusion example, \Cref {listing:efflang-scope-extrusion}. Notice that in place of AST nodes, we may now have compile-time executable code that \textit {evaluate} to AST nodes}{figure.2.7}{}}
\newlabel{fig:classifier-ast-scope-extrusion@cref}{{[figure][7][2]2.7}{[1][25][]26}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {12}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that passes the Eager and Lazy Dynamic Checks, but is not well-typed under the Refined Environment Classifiers type system.}}{26}{listing.12}\protected@file@percent }
\newlabel{listing:efflang-no-scope-extrusion}{{12}{26}{A \efflang {} program that passes the Eager and Lazy Dynamic Checks, but is not well-typed under the Refined Environment Classifiers type system}{listing.12}{}}
\newlabel{listing:efflang-no-scope-extrusion@cref}{{[listing][12][]12}{[1][26][]26}{}{}{}}
\BKM@entry{id=13,dest={636861707465722E33},srcline={3}}{5C3337365C3337375C303030435C303030615C3030306C5C303030635C303030755C3030306C5C303030755C30303073}
\citation{xie-2023}
\BKM@entry{id=14,dest={73656374696F6E2E332E31},srcline={45}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030735C3030306F5C303030755C303030725C303030635C303030655C3030305C3034305C3030306C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C3030303A5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030515C303030755C3030306F5C303030745C303030655C3030302D5C303030535C303030705C3030306C5C303030695C303030635C30303065}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Calculus}{27}{chapter.3}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces $\lambda _{\equote [\texttt  {op}]}${} is first elaborated into $\lambda _{\texttt  {AST}(\texttt  {op})}${}, which is then executed \textbf  {at compile-time} to obtain the AST of a run-time $\lambda _{\texttt  {op}}${} program.}}{27}{figure.3.1}\protected@file@percent }
\newlabel{fig:elaboration-then-execution}{{3.1}{27}{\calculusName {} is first elaborated into \coreLang {}, which is then executed \textbf {at compile-time} to obtain the AST of a run-time \efflang {} program}{figure.3.1}{}}
\newlabel{fig:elaboration-then-execution@cref}{{[figure][1][3]3.1}{[1][27][]27}{}{}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}The source language: $\lambda _{\equote [\texttt  {op}]}${}}{27}{section.3.1}\protected@file@percent }
\newlabel{section:source-lang}{{3.1}{27}{The source language: \texorpdfstring {\sourceLang {}}{Lambda-Op-Quote-Splice}}{section.3.1}{}}
\newlabel{section:source-lang@cref}{{[section][1][3]3.1}{[1][27][]27}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces $\lambda _{\equote [\texttt  {op}]}${} syntax. The syntax is broadly the same as $\lambda _{\texttt  {op}}${}, except with the addition of quotes and splices.}}{27}{figure.3.2}\protected@file@percent }
\newlabel{fig:source-syntax}{{3.2}{27}{\sourceLang {} syntax. The syntax is broadly the same as \efflang {}, except with the addition of quotes and splices}{figure.3.2}{}}
\newlabel{fig:source-syntax@cref}{{[figure][2][3]3.2}{[1][27][]27}{}{}{}}
\BKM@entry{id=15,dest={73756273656374696F6E2E332E312E31},srcline={61}}{5C3337365C3337375C303030545C303030795C303030705C303030655C3030305C3034305C303030535C303030795C303030735C303030745C303030655C3030306D}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces $\lambda _{\equote [\texttt  {op}]}${} types. I highlight three important elements: first, stratifying types into two levels, $0$ and $-1$. Second, stratifying effects into two levels, $\xi $ (for run-time effects) and $\Delta $ for compile-time effects. Third, the \textsf  {Code} type at level $-1$ allows for compile-time programs to manipulate ASTs of run-time code.}}{28}{figure.3.3}\protected@file@percent }
\newlabel{fig:source-types}{{3.3}{28}{\sourceLang {} types. I highlight three important elements: first, stratifying types into two levels, $0$ and $-1$. Second, stratifying effects into two levels, $\xi $ (for run-time effects) and $\Delta $ for compile-time effects. Third, the \textsf {Code} type at level $-1$ allows for compile-time programs to manipulate ASTs of run-time code}{figure.3.3}{}}
\newlabel{fig:source-types@cref}{{[figure][3][3]3.3}{[1][28][]28}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}Type System}{28}{subsection.3.1.1}\protected@file@percent }
\citation{xie-2023}
\zref@newlabel{mdf@pagelabel-5}{\default{3.1.1}\page{29}\abspage{33}\mdf@pagevalue{29}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{3.1.{1}}{Level}}{29}{mddefinition.3.1.1}\protected@file@percent }
\citation{xie-2023}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Typing Judgement}{30}{subsubsection*.22}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces Transitions between modes \textbf  {\textsf  {\textcolor {compile}{c}}}{}, \textbf  {\textsf  {\textcolor {splice}{s}}}{}, and \textbf  {\textsf  {\textcolor {quote}{q}}}{}. Top-level splices transition from \textbf  {\textsf  {\textcolor {compile}{c}}}{} to \textbf  {\textsf  {\textcolor {splice}{s}}}{}, quotes transition from \textbf  {\textsf  {\textcolor {splice}{s}}}{} to \textbf  {\textsf  {\textcolor {quote}{q}}}{}, and splices (under quotes) transition from \textbf  {\textsf  {\textcolor {quote}{q}}}{} to \textbf  {\textsf  {\textcolor {splice}{s}}}{}.}}{31}{figure.3.4}\protected@file@percent }
\newlabel{fig:compiler-mode-transitions}{{3.4}{31}{Transitions between modes \compilemode {}, \splicemode {}, and \quotemode {}. Top-level splices transition from \compilemode {} to \splicemode {}, quotes transition from \splicemode {} to \quotemode {}, and splices (under quotes) transition from \quotemode {} to \splicemode {}}{figure.3.4}{}}
\newlabel{fig:compiler-mode-transitions@cref}{{[figure][4][3]3.4}{[1][31][]31}{}{}{}}
\BKM@entry{id=16,dest={73656374696F6E2E332E32},srcline={580}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030635C3030306F5C303030725C303030655C3030305C3034305C3030306C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C3030303A5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030415C303030535C30303054}
\zref@newlabel{mdf@pagelabel-6}{\default{3.1.1}\page{32}\abspage{36}\mdf@pagevalue{32}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{3.1.{2}}{Well-typed expression}}{32}{mddefinition.3.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3.2}The core language: $\lambda _{\texttt  {AST}(\texttt  {op})}${}}{32}{section.3.2}\protected@file@percent }
\newlabel{section:core-lang}{{3.2}{32}{The core language: \texorpdfstring {\coreLang {}}{Lambda-Op-AST}}{section.3.2}{}}
\newlabel{section:core-lang@cref}{{[section][2][3]3.2}{[1][32][]32}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces The \textbf  {\textsf  {\textcolor {compile}{c}}}{}-mode and \textbf  {\textsf  {\textcolor {quote}{q}}}{}-mode typing rules for $\lambda _{\equote [\texttt  {op}]}${}. The rules are nearly identical to the $\lambda _{\texttt  {op}}${} typing rules, with the exception of level annotations on types, except that everything -- including values like $1$ -- are typed as compile-time computations. Further, two additional rules, \textsc  {(\textbf  {\textsf  {\textcolor {compile}{c}}}{}-Splice)} and \textsc  {(\textbf  {\textsf  {\textcolor {quote}{q}}}{}-Splice)} formalise the transition to \textbf  {\textsf  {\textcolor {splice}{s}}}{}-mode. The former is top-level splice and the latter is splice.}}{33}{figure.3.5}\protected@file@percent }
\newlabel{fig:source-cq-typing-rules}{{3.5}{33}{The \compilemode {}-mode and \quotemode {}-mode typing rules for \sourceLang {}. The rules are nearly identical to the \efflang {} typing rules, with the exception of level annotations on types, except that everything -- including values like $1$ -- are typed as compile-time computations. Further, two additional rules, \textsc {(\compilemode {}-Splice)} and \textsc {(\quotemode {}-Splice)} formalise the transition to \splicemode {}-mode. The former is top-level splice and the latter is splice}{figure.3.5}{}}
\newlabel{fig:source-cq-typing-rules@cref}{{[figure][5][3]3.5}{[1][32][]33}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.6}{\ignorespaces The \textbf  {\textsf  {\textcolor {splice}{s}}}{}-mode typing rules for $\lambda _{\equote [\texttt  {op}]}${}. The rules are exactly identical to the $\lambda _{\texttt  {op}}${} typing rules, with the exception of level annotations on types, and the additional \textsc  {(Quote)} rule, which makes level $0$ code available at compile-time. }}{34}{figure.3.6}\protected@file@percent }
\newlabel{fig:source-s-typing-rules}{{3.6}{34}{The \splicemode {}-mode typing rules for \sourceLang {}. The rules are exactly identical to the \efflang {} typing rules, with the exception of level annotations on types, and the additional \textsc {(Quote)} rule, which makes level $0$ code available at compile-time}{figure.3.6}{}}
\newlabel{fig:source-s-typing-rules@cref}{{[figure][6][3]3.6}{[1][32][]34}{}{}{}}
\BKM@entry{id=17,dest={73756273656374696F6E2E332E322E31},srcline={679}}{5C3337365C3337375C3030304F5C303030705C303030655C303030725C303030615C303030745C303030695C3030306F5C3030306E5C303030615C3030306C5C3030305C3034305C303030535C303030655C3030306D5C303030615C3030306E5C303030745C303030695C303030635C30303073}
\@writefile{lof}{\contentsline {figure}{\numberline {3.7}{\ignorespaces $\lambda _{\texttt  {AST}(\texttt  {op})}${} syntax. The syntax is broadly the same as $\lambda _{\texttt  {op}}${}, except with the addition of AST constructors and scope extrusion checking machinery.}}{36}{figure.3.7}\protected@file@percent }
\newlabel{fig:source-syntax}{{3.7}{36}{\coreLang {} syntax. The syntax is broadly the same as \efflang {}, except with the addition of AST constructors and scope extrusion checking machinery}{figure.3.7}{}}
\newlabel{fig:source-syntax@cref}{{[figure][7][3]3.7}{[1][36][]36}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.1}Operational Semantics}{36}{subsection.3.2.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.8}{\ignorespaces Selected rules of the $\lambda _{\texttt  {AST}(\texttt  {op})}${} operational semantics. Many of the rules can be trivially adapted from the $\lambda _{\texttt  {op}}${} semantics (\Cref  {fig:efflang-opsem}), and therefore have been omitted. Rules relating to the muting and unmuting of variables is complex, and will be best explained when we discuss scope extrusion checks. For now, these mechanisms are \textbf  {\textcolor {coreHighlight}{highlighted}}.}}{37}{figure.3.8}\protected@file@percent }
\newlabel{fig:corelang-opsem}{{3.8}{37}{Selected rules of the \coreLang {} operational semantics. Many of the rules can be trivially adapted from the \efflang {} semantics (\Cref {fig:efflang-opsem}), and therefore have been omitted. Rules relating to the muting and unmuting of variables is complex, and will be best explained when we discuss scope extrusion checks. For now, these mechanisms are \textbf {\textcolor {coreHighlight}{highlighted}}}{figure.3.8}{}}
\newlabel{fig:corelang-opsem@cref}{{[figure][8][3]3.8}{[1][36][]37}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Configurations}{37}{subsubsection*.24}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline AST Rules}{37}{subsubsection*.26}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Scope Extrusion Checking Rules}{38}{subsubsection*.28}\protected@file@percent }
\BKM@entry{id=18,dest={73756273656374696F6E2E332E322E32},srcline={767}}{5C3337365C3337375C303030545C303030795C303030705C303030655C3030305C3034305C303030535C303030795C303030735C303030745C303030655C3030306D}
\citation{scherer-2017}
\@writefile{lof}{\contentsline {figure}{\numberline {3.9}{\ignorespaces The types of $\lambda _{\texttt  {AST}(\texttt  {op})}${}. $\lambda _{\texttt  {AST}(\texttt  {op})}${} types extend $\lambda _{\texttt  {op}}${} types with an \textsf  {AST} type (for ASTs), and a \textsf  {Binder} type}}{39}{figure.3.9}\protected@file@percent }
\newlabel{fig:core-types}{{3.9}{39}{The types of \coreLang {}. \coreLang {} types extend \efflang {} types with an \textsf {AST} type (for ASTs), and a \textsf {Binder} type}{figure.3.9}{}}
\newlabel{fig:core-types@cref}{{[figure][9][3]3.9}{[1][39][]39}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.2}Type System}{39}{subsection.3.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Typing Rules}{39}{subsubsection*.30}\protected@file@percent }
\BKM@entry{id=19,dest={73656374696F6E2E332E33},srcline={897}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306F5C3030306E5C3030305C3034305C303030665C303030725C3030306F5C3030306D5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030515C303030755C3030306F5C303030745C303030655C3030302D5C303030535C303030705C3030306C5C303030695C303030635C303030655C3030305C3034305C303030745C3030306F5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030415C303030535C30303054}
\BKM@entry{id=20,dest={73756273656374696F6E2E332E332E31},srcline={915}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306E5C303030675C3030305C3034305C303030545C303030795C303030705C303030655C30303073}
\@writefile{lof}{\contentsline {figure}{\numberline {3.10}{\ignorespaces Selected $\lambda _{\texttt  {AST}(\texttt  {op})}${} typing rules}}{40}{figure.3.10}\protected@file@percent }
\newlabel{fig:core-typing-rules}{{3.10}{40}{Selected \coreLang {} typing rules}{figure.3.10}{}}
\newlabel{fig:core-typing-rules@cref}{{[figure][10][3]3.10}{[1][40][]40}{}{}{}}
\zref@newlabel{mdf@pagelabel-7}{\default{3.2.2}\page{40}\abspage{44}\mdf@pagevalue{40}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{3.2.{1}}{Well-typed term}}{40}{mddefinition.3.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Elaboration from $\lambda _{\equote [\texttt  {op}]}${} to $\lambda _{\texttt  {AST}(\texttt  {op})}${}}{40}{section.3.3}\protected@file@percent }
\newlabel{section:elaboration}{{3.3}{40}{Elaboration from \texorpdfstring {\sourceLang {}}{Lambda-Op-Quote-Splice} to \texorpdfstring {\coreLang {}}{Lambda-Op-AST}}{section.3.3}{}}
\newlabel{section:elaboration@cref}{{[section][3][3]3.3}{[1][40][]40}{}{}{}}
\BKM@entry{id=21,dest={73756273656374696F6E2E332E332E32},srcline={931}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306E5C303030675C3030305C3034305C303030435C3030306F5C3030306E5C303030745C303030655C303030785C303030745C30303073}
\BKM@entry{id=22,dest={73756273656374696F6E2E332E332E33},srcline={943}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306E5C303030675C3030305C3034305C303030545C303030655C303030725C3030306D5C30303073}
\BKM@entry{id=23,dest={73756273656374696F6E2E332E332E34},srcline={975}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306E5C303030675C3030305C3034305C303030545C303030795C303030705C303030695C3030306E5C303030675C3030305C3034305C3030304A5C303030755C303030645C303030675C303030655C3030306D5C303030655C3030306E5C303030745C30303073}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}Elaborating Types}{41}{subsection.3.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}Elaborating Contexts}{41}{subsection.3.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}Elaborating Terms}{41}{subsection.3.3.3}\protected@file@percent }
\BKM@entry{id=24,dest={73656374696F6E2E332E34},srcline={994}}{5C3337365C3337375C3030304D5C303030655C303030745C303030615C303030745C303030685C303030655C3030306F5C303030725C30303079}
\@writefile{lof}{\contentsline {figure}{\numberline {3.11}{\ignorespaces Selected term elaboration rules from $\lambda _{\equote [\texttt  {op}]}${} to $\lambda _{\texttt  {AST}(\texttt  {op})}${}. Elaboration is moderated by the compiler mode. In \textbf  {\textsf  {\textcolor {compile}{c}}}{} and \textbf  {\textsf  {\textcolor {quote}{q}}}{}, elaboration builds ASTs. While mostly identical, they differ in the elaboration for $\splice $. In \textbf  {\textsf  {\textcolor {compile}{c}}}{}, one additionally inserts a marker representing the position of the top-level splice. \textbf  {\textsf  {\textcolor {compile}{c}}}{} and \textbf  {\textsf  {\textcolor {quote}{q}}}{} will be further distinguished when elaboration is extended to insert scope extrusion checks. In \textbf  {\textsf  {\textcolor {splice}{s}}}{}, elaboration is effectively the identity. }}{42}{figure.3.11}\protected@file@percent }
\newlabel{fig:term-elaboration}{{3.11}{42}{Selected term elaboration rules from \sourceLang {} to \coreLang {}. Elaboration is moderated by the compiler mode. In \compilemode {} and \quotemode {}, elaboration builds ASTs. While mostly identical, they differ in the elaboration for $\splice $. In \compilemode {}, one additionally inserts a marker representing the position of the top-level splice. \compilemode {} and \quotemode {} will be further distinguished when elaboration is extended to insert scope extrusion checks. In \splicemode {}, elaboration is effectively the identity}{figure.3.11}{}}
\newlabel{fig:term-elaboration@cref}{{[figure][11][3]3.11}{[1][41][]42}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.4}Elaborating Typing Judgements}{42}{subsection.3.3.4}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3.4}Metatheory}{42}{section.3.4}\protected@file@percent }
\newlabel{section:metatheory}{{3.4}{42}{Metatheory}{section.3.4}{}}
\newlabel{section:metatheory@cref}{{[section][4][3]3.4}{[1][42][]42}{}{}{}}
\zref@newlabel{mdf@pagelabel-8}{\default{3.4}\page{43}\abspage{47}\mdf@pagevalue{43}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{3.4.{1}}{Elaboration Preservation}}{43}{mdtheorem.3.4.1}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-9}{\default{3.4}\page{43}\abspage{47}\mdf@pagevalue{43}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{3.4.{2}}{Progress}}{43}{mdtheorem.3.4.2}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-10}{\default{3.4}\page{43}\abspage{47}\mdf@pagevalue{43}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{3.4.{3}}{Reduction Preservation}}{43}{mdtheorem.3.4.3}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-11}{\default{3.4}\page{43}\abspage{47}\mdf@pagevalue{43}}
\@writefile{thm}{\contentsline {mdcorollary}{{Corollary}{3.4.{1}}{Type Safety}}{43}{mdcorollary.3.4.1}\protected@file@percent }
\newlabel{cor:core-type-safety}{{3.4.{1}}{43}{Metatheory}{mdcorollary.3.4.1}{}}
\newlabel{cor:core-type-safety@cref}{{[mdcorollary][1][3,4]3.4.{1}}{[1][43][]43}{}{}{}}
\zref@newlabel{mdf@pagelabel-12}{\default{3.4}\page{44}\abspage{48}\mdf@pagevalue{44}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{3.4.{4}}{Quote-Splice Duality}}{44}{mdtheorem.3.4.4}\protected@file@percent }
\BKM@entry{id=25,dest={636861707465722E34},srcline={1}}{5C3337365C3337375C303030535C303030635C3030306F5C303030705C303030655C3030305C3034305C303030455C303030785C303030745C303030725C303030755C303030735C303030695C3030306F5C3030306E}
\BKM@entry{id=26,dest={73656374696F6E2E342E31},srcline={4}}{5C3337365C3337375C3030304C5C303030615C3030307A5C303030795C3030305C3034305C303030445C303030795C3030306E5C303030615C3030306D5C303030695C303030635C3030305C3034305C303030435C303030685C303030655C303030635C3030306B}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Scope Extrusion}{45}{chapter.4}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}Lazy Dynamic Check}{45}{section.4.1}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-13}{\default{4.1}\page{45}\abspage{49}\mdf@pagevalue{45}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{4.1.{1}}{Lazy Scope Extrusion}}{45}{mddefinition.4.1.1}\protected@file@percent }
\newlabel{def:lazy-scope-extrusion}{{4.1.{1}}{45}{Lazy Dynamic Check}{mddefinition.4.1.1}{}}
\newlabel{def:lazy-scope-extrusion@cref}{{[mddefinition][1][4,1]4.1.{1}}{[1][45][]45}{}{}{}}
\zref@newlabel{mdf@pagelabel-14}{\default{4.1}\page{45}\abspage{49}\mdf@pagevalue{45}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{4.1.{1}}{Correctness and Expressiveness of the Lazy Dynamic Check}}{45}{mdtheorem.4.1.1}\protected@file@percent }
\BKM@entry{id=27,dest={73656374696F6E2E342E32},srcline={39}}{5C3337365C3337375C303030455C303030615C303030675C303030655C303030725C3030305C3034305C303030445C303030795C3030306E5C303030615C3030306D5C303030695C303030635C3030305C3034305C303030435C303030685C303030655C303030635C3030306B}
\zref@newlabel{mdf@pagelabel-15}{\default{4.1}\page{46}\abspage{50}\mdf@pagevalue{46}}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}Eager Dynamic Check}{46}{section.4.2}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-16}{\default{4.2}\page{46}\abspage{50}\mdf@pagevalue{46}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{4.2.{1}}{Eager Scope Extrusion}}{46}{mddefinition.4.2.1}\protected@file@percent }
\citation{kiselyov-14}
\citation{kiselyov-24}
\@writefile{lol}{\contentsline {listing}{\numberline {13}{\ignorespaces Illustrating the eager dynamic check: eager scope extrusion is caused by the $\texttt  {\textbf  {return}} \,\, {y}$ expression, and caught when we try to use the variable $y$ is bound to, $z$, to build a larger AST $\equote [z + 1]$}}{47}{listing.13}\protected@file@percent }
\newlabel{listing:eager-scope-extrusion-check-eg}{{13}{47}{Illustrating the eager dynamic check: eager scope extrusion is caused by the $\return {y}$ expression, and caught when we try to use the variable $y$ is bound to, $z$, to build a larger AST $\equote [z + 1]$}{listing.13}{}}
\newlabel{listing:eager-scope-extrusion-check-eg@cref}{{[listing][13][]13}{[1][47][]47}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {14}{\ignorespaces The eager dynamic check additionally fires at the level of a top-level splice, like the lazy dynamic check. Conceptually, top-level splice does build an AST, by splicing a sub-tree into an inert, and ambient, AST}}{47}{listing.14}\protected@file@percent }
\newlabel{listing:eager-scope-extrusion-check-eg-tls}{{14}{47}{The eager dynamic check additionally fires at the level of a top-level splice, like the lazy dynamic check. Conceptually, top-level splice does build an AST, by splicing a sub-tree into an inert, and ambient, AST}{listing.14}{}}
\newlabel{listing:eager-scope-extrusion-check-eg-tls@cref}{{[listing][14][]14}{[1][47][]47}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {15}{\ignorespaces The eager dynamic check is unsafe: it does not report all occurrences of eager scope extrusion. In the program, we cause eager scope extrusion ($\texttt  {\textbf  {return}} \,\, {y}$), where $y$ refers to the unbound variable $\equote [x]$ and then enter into a non-terminating loop which never refers to $y$.}}{47}{listing.15}\protected@file@percent }
\newlabel{listing:eager-scope-extrusion-unsafe}{{15}{47}{The eager dynamic check is unsafe: it does not report all occurrences of eager scope extrusion. In the program, we cause eager scope extrusion ($\return {y}$), where $y$ refers to the unbound variable $\equote [x]$ and then enter into a non-terminating loop which never refers to $y$}{listing.15}{}}
\newlabel{listing:eager-scope-extrusion-unsafe@cref}{{[listing][15][]15}{[1][47][]47}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {16}{\ignorespaces The eager dynamic check additionally will not report eager scope extrusion in the case where the offending AST ($\texttt  {\textbf  {return}} \,\, {y}$ where $y$ bound to $\texttt  {Var}(x_{\mathbb  {N}})$) is thrown away.}}{47}{listing.16}\protected@file@percent }
\citation{kiselyov-14}
\newlabel{listing:eager-scope-extrusion-unsafe-no-use}{{16}{48}{The eager dynamic check additionally will not report eager scope extrusion in the case where the offending AST ($\return {y}$ where $y$ bound to $\Var {x}{\mathbb {N}}$) is thrown away}{listing.16}{}}
\newlabel{listing:eager-scope-extrusion-unsafe-no-use@cref}{{[listing][16][]16}{[1][48][]48}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {17}{\ignorespaces The eager dynamic check will additionally not report cases where the offending AST ($\texttt  {\textbf  {return}} \,\, {y}$ where $y$ bound to $\texttt  {Var}(x_{\mathbb  {N}})$) is used to build ASTs, but only in safe ways. In this case, the offending AST is bound to $w$, which is only ever used in a safe way: the continuation restores the context that permits $\texttt  {Var}(x_{\mathbb  {N}})$ to be used.}}{48}{listing.17}\protected@file@percent }
\newlabel{listing:eager-scope-extrusion-unsafe-continue}{{17}{48}{The eager dynamic check will additionally not report cases where the offending AST ($\return {y}$ where $y$ bound to $\Var {x}{\mathbb {N}}$) is used to build ASTs, but only in safe ways. In this case, the offending AST is bound to $w$, which is only ever used in a safe way: the continuation restores the context that permits $\Var {x}{\mathbb {N}}$ to be used}{listing.17}{}}
\newlabel{listing:eager-scope-extrusion-unsafe-continue@cref}{{[listing][17][]17}{[1][48][]48}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {18}{\ignorespaces A program which will trigger the eager scope extrusion check. The offending AST ($\texttt  {Var}(x_{\mathbb  {N}})$) is used to construct a larger AST in a way that appears to be unsafe $\equote [{\splice [y]+0}]$, but is actually not, since the unsafe AST is then only used in a safe way.}}{48}{listing.18}\protected@file@percent }
\newlabel{listing:eager-scope-extrusion-looks-unsafe}{{18}{48}{A program which will trigger the eager scope extrusion check. The offending AST ($\Var {x}{\mathbb {N}}$) is used to construct a larger AST in a way that appears to be unsafe $\equote [{\splice [y]+0}]$, but is actually not, since the unsafe AST is then only used in a safe way}{listing.18}{}}
\newlabel{listing:eager-scope-extrusion-looks-unsafe@cref}{{[listing][18][]18}{[1][48][]48}{}{}{}}
\BKM@entry{id=28,dest={73656374696F6E2E342E33},srcline={173}}{5C3337365C3337375C303030425C303030655C303030735C303030745C3030302D5C303030455C303030665C303030665C3030306F5C303030725C303030745C3030305C3034305C303030445C303030795C3030306E5C303030615C3030306D5C303030695C303030635C3030305C3034305C303030435C303030685C303030655C303030635C3030306B}
\@writefile{toc}{\contentsline {section}{\numberline {4.3}Best-Effort Dynamic Check}{49}{section.4.3}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-17}{\default{4.3}\page{49}\abspage{53}\mdf@pagevalue{49}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{4.3.{1}}{Best-Effort Scope Extrusion}}{49}{mddefinition.4.3.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces An illustration of when variables are unmuted. The stack, $E$, grows rightwards. Effects are caught by handlers (\textbf  {\textcolor {darkgrey}{dark grey}}). This captures a portion of the stack (\textbf  {\textcolor {lightgrey}{light grey}}). We track the length of the stack, in \textbf  {white}, that are never captured by an operation in this fashion. Frames in \textbf  {white} will never be able to resume a continuation.}}{50}{figure.4.1}\protected@file@percent }
\newlabel{fig:unmute-variables-algo}{{4.1}{50}{An illustration of when variables are unmuted. The stack, $E$, grows rightwards. Effects are caught by handlers (\textbf {\textcolor {darkgrey}{dark grey}}). This captures a portion of the stack (\textbf {\textcolor {lightgrey}{light grey}}). We track the length of the stack, in \textbf {white}, that are never captured by an operation in this fashion. Frames in \textbf {white} will never be able to resume a continuation}{figure.4.1}{}}
\newlabel{fig:unmute-variables-algo@cref}{{[figure][1][4]4.1}{[1][50][]50}{}{}{}}
\zref@newlabel{mdf@pagelabel-18}{\default{4.3}\page{51}\abspage{55}\mdf@pagevalue{51}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{4.3.{1}}{Correctness of the Best-Effort Check}}{51}{mdtheorem.4.3.1}\protected@file@percent }
\@writefile{lol}{\contentsline {listing}{\numberline {19}{\ignorespaces The program attempts to build the (unsafe) AST $\lambda x.\texttt  {\textbf  {return}} \,\, {y}$, where $y$ has extruded its scope, but then throws it away, returning instead the AST of $1$ (which does not exhibit lazy scope extrusion). Critically, the effect never throws past the constructor of the outer lambda, $\lambda x. [-]$. The program will eventually reduce to a configuration $\langle \textbf  {\texttt  {dlet}}({\texttt  {\underline  {Var}}(x_{\mathbb  {N}})}, {\texttt  {\textbf  {return}} \,\, {\texttt  {Lam}(\texttt  {\underline  {Var}}(x_{\mathbb  {N}}), \texttt  {Var}(y_{\mathbb  {N}}))}}); E$$\, ::\, $$\textbf  {\texttt  {check}}[-]; U; \{\texttt  {Var}(y_{\mathbb  {N}})\} ; I \rangle $. Transitioning from the configuration will unmute $\texttt  {Var}(y_{\mathbb  {N}})$, and the surrounding \textbf  {\texttt  {check}} will fail.}}{51}{listing.19}\protected@file@percent }
\newlabel{listing:best-effort-imperfect}{{19}{51}{The program attempts to build the (unsafe) AST $\lambda x.\return {y}$, where $y$ has extruded its scope, but then throws it away, returning instead the AST of $1$ (which does not exhibit lazy scope extrusion). Critically, the effect never throws past the constructor of the outer lambda, $\lambda x. [-]$. The program will eventually reduce to a configuration $\langle \dlet {\Binder {x}{\mathbb {N}}}{\return {\Lam {\Binder {x}{\mathbb {N}}}{\Var {y}{\mathbb {N}}}}}; E$$\, ::\, $$\textbf {\texttt {check}}[-]; U; \{\Var {y}{\mathbb {N}}\} ; I \rangle $. Transitioning from the configuration will unmute $\Var {y}{\mathbb {N}}$, and the surrounding \textbf {\texttt {check}} will fail}{listing.19}{}}
\newlabel{listing:best-effort-imperfect@cref}{{[listing][19][]19}{[1][51][]51}{}{}{}}
\BKM@entry{id=29,dest={73656374696F6E2E342E34},srcline={329}}{5C3337365C3337375C303030525C303030655C303030665C303030695C3030306E5C303030655C303030645C3030305C3034305C303030455C3030306E5C303030765C303030695C303030725C3030306F5C3030306E5C3030306D5C303030655C3030306E5C303030745C3030305C3034305C303030435C3030306C5C303030615C303030735C303030735C303030695C303030665C303030695C303030655C303030725C30303073}
\BKM@entry{id=30,dest={73656374696F6E2E342E35},srcline={332}}{5C3337365C3337375C3030304C5C303030655C303030745C3030305C3034305C303030495C3030306E5C303030735C303030655C303030725C303030745C303030695C3030306F5C3030306E}
\bibdata{library}
\zref@newlabel{mdf@pagelabel-19}{\default{4.3}\page{52}\abspage{56}\mdf@pagevalue{52}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{4.3.{2}}{Cause for Concern Property}}{52}{mdtheorem.4.3.2}\protected@file@percent }
\newlabel{thm:best-effort-cause-for-concern}{{4.3.{2}}{52}{Best-Effort Dynamic Check}{mdtheorem.4.3.2}{}}
\newlabel{thm:best-effort-cause-for-concern@cref}{{[mdtheorem][2][4,3]4.3.{2}}{[1][52][]52}{}{}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.4}Refined Environment Classifiers}{52}{section.4.4}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4.5}Let Insertion}{53}{section.4.5}\protected@file@percent }
\bibcite{abrahams-04}{{1}{2004}{{Abrahams and Gurtovoy}}{{}}}
\bibcite{bauer-2014}{{2}{2014}{{Bauer and Pretnar}}{{}}}
\bibcite{calcagno-00}{{3}{2000}{{Calcagno et~al.}}{{Calcagno, Moggi, and Taha}}}
\bibcite{chiang-2024}{{4}{2024}{{Chiang et~al.}}{{Chiang, Yallop, White, and Xie}}}
\bibcite{felleisen-87}{{5}{1987}{{Felleisen and Friedman}}{{}}}
\bibcite{hillestrom-2018}{{6}{2018}{{Hillerstr{\"o}m and Lindley}}{{}}}
\bibcite{inoue-2012}{{7}{2012}{{Inoue and Taha}}{{}}}
\bibcite{isoda-24}{{8}{2024}{{Isoda et~al.}}{{Isoda, Yokoyama, and Kameyama}}}
\bibcite{jax-grad-metaprogramming}{{9}{}{{Jax-Ml}}{{}}}
\bibcite{kiselyov-2012}{{10}{2012}{{Kiselyov}}{{}}}
\bibcite{kiselyov-14}{{11}{2014}{{Kiselyov}}{{}}}
\bibcite{kiselyov-2024}{{12}{2024}{{Kiselyov}}{{}}}
\bibcite{kiselyov-16}{{13}{2016}{{Kiselyov et~al.}}{{Kiselyov, Kameyama, and Sudo}}}
\bibcite{levy-2003}{{14}{2003}{{Levy et~al.}}{{Levy, Power, and Thielecke}}}
\bibcite{mainland-2012}{{15}{2012}{{Mainland}}{{}}}
\bibcite{phipps-costin-2023}{{16}{2023}{{Phipps-Costin et~al.}}{{Phipps-Costin, Rossberg, Guha, Leijen, Hillerstr\"{o}m, Sivaramakrishnan, Pretnar, and Lindley}}}
\bibcite{pretnar-15}{{17}{2015}{{Pretnar}}{{}}}
\bibcite{rice-53}{{18}{1953}{{Rice}}{{}}}
\bibcite{robinson-01}{{19}{2001}{{Robison}}{{}}}
\bibcite{servetto-2013}{{20}{2013}{{Servetto and Zucca}}{{}}}
\bibcite{sivaramakrishnan-21}{{21}{2021}{{Sivaramakrishnan et~al.}}{{Sivaramakrishnan, Dolan, White, Kelly, Jaffer, and Madhavapeddy}}}
\bibcite{tratt-2008}{{22}{2008}{{Tratt}}{{}}}
\bibcite{vandebon-2021}{{23}{2021}{{Vandebon et~al.}}{{Vandebon, Coutinho, Luk, and Nurvitadhi}}}
\bibcite{wickham-2019}{{24}{2019}{{Wickham}}{{}}}
\bibcite{xie-2022}{{25}{2022}{{Xie et~al.}}{{Xie, Cong, Ikemori, and Leijen}}}
\bibcite{xie-2023}{{26}{2023}{{Xie et~al.}}{{Xie, White, Nicole, and Yallop}}}
\bibcite{yallop-2023}{{27}{2023}{{Yallop et~al.}}{{Yallop, Xie, and Krishnaswami}}}
\xdef \mintedoldcachechecksum{\detokenize{F8AE818D1C9748EA140FF802EBC4FD46:144}}
\global\@namedef{scr@dte@chapter@lastmaxnumwidth}{11.8799pt}
\global\@namedef{scr@dte@section@lastmaxnumwidth}{19.79993pt}
\global\@namedef{scr@dte@subsection@lastmaxnumwidth}{28.79993pt}
\@writefile{toc}{\providecommand\tocbasic@end@toc@file{}\tocbasic@end@toc@file}
\gdef \@abspage@last{60}
