\relax 
\providecommand\zref@newlabel[2]{}
\providecommand*\new@tpo@label[2]{}
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\providecommand\BKM@entry[2]{}
\bibstyle{abbrvnat}
\providecommand \oddpage@label [2]{}
\BKM@entry{id=1,dest={636861707465722E31},srcline={1}}{5C3337365C3337375C303030495C3030306E5C303030745C303030725C3030306F5C303030645C303030755C303030635C303030745C303030695C3030306F5C3030306E}
\citation{rice-53,robinson-01}
\citation{abrahams-04}
\citation{sheard-02}
\citation{huceke-memcpy}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Introduction}{1}{chapter.1}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\citation{kiselyov-14}
\citation{lawall-94}
\citation{kiselyov-14}
\citation{sivaramakrishnan-21}
\citation{pretnar-15}
\citation{kiselyov-16,isoda-24}
\citation{calcagno-00}
\citation{kiselyov-14}
\citation{xie-2022}
\BKM@entry{id=2,dest={73656374696F6E2E312E31},srcline={81}}{5C3337365C3337375C303030435C3030306F5C3030306E5C303030745C303030725C303030695C303030625C303030755C303030745C303030695C3030306F5C3030306E5C30303073}
\citation{kiselyov-14}
\citation{kiselyov-16}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Contributions}{3}{section.1.1}\protected@file@percent }
\BKM@entry{id=3,dest={636861707465722E32},srcline={3}}{5C3337365C3337375C303030425C303030615C303030635C3030306B5C303030675C303030725C3030306F5C303030755C3030306E5C30303064}
\BKM@entry{id=4,dest={73656374696F6E2E322E31},srcline={1}}{5C3337365C3337375C3030304D5C303030655C303030745C303030615C303030705C303030725C3030306F5C303030675C303030725C303030615C3030306D5C3030306D5C303030695C3030306E5C30303067}
\BKM@entry{id=5,dest={73756273656374696F6E2E322E312E31},srcline={4}}{}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Background}{4}{chapter.2}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Metaprogramming}{4}{section.2.1}\protected@file@percent }
\newlabel{section:metaprogramming-technical}{{2.1}{4}{Metaprogramming}{section.2.1}{}}
\newlabel{section:metaprogramming-technical@cref}{{[section][1][2]2.1}{[1][4][]4}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Metaprogramming for Fast and Maintainable Code}{4}{subsection.2.1.1}\protected@file@percent }
\newlabel{subsection:metaprogramming-motivation}{{2.1.1}{4}{Metaprogramming for Fast and Maintainable Code}{subsection.2.1.1}{}}
\newlabel{subsection:metaprogramming-motivation@cref}{{[subsection][1][2,1]2.1.1}{[1][4][]4}{}{}{}}
\citation{tratt-2008}
\citation{yallop-2023}
\citation{servetto-2013}
\citation{wickham-2019}
\citation{vandebon-2021}
\citation{rice-53}
\citation{robinson-01}
\citation{jax-grad-metaprogramming}
\citation{jax-grad-metaprogramming}
\@writefile{lol}{\contentsline {listing}{\numberline {1}{\ignorespaces A maintainable implementation of \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad}}}}{5}{listing.1}\protected@file@percent }
\newlabel{listing:ocaml-grad-main}{{1}{5}{A maintainable implementation of \mintinline {ocaml}{grad}}{listing.1}{}}
\newlabel{listing:ocaml-grad-main@cref}{{[listing][1][]1}{[1][5][]5}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {2}{\ignorespaces An implementation of \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad}}, specialised to \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{f}} $=2(x^2 + 2x) + 4$}}{5}{listing.2}\protected@file@percent }
\newlabel{listing:ocaml-grad-fast}{{2}{5}{An implementation of \mintinline {ocaml}{grad}, specialised to \mintinline {ocaml}{f} $=2(x^2 + 2x) + 4$}{listing.2}{}}
\newlabel{listing:ocaml-grad-fast@cref}{{[listing][2][]2}{[1][5][]5}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline The Mechanics of Metaprogramming}{6}{subsubsection*.7}\protected@file@percent }
\@writefile{lol}{\contentsline {listing}{\numberline {3}{\ignorespaces A metaprogrammed \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad_gen}} function, which resembles \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad_main}} but generates a function resembling \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad_spec}}}}{6}{listing.3}\protected@file@percent }
\newlabel{listing:ocaml-pow-gen}{{3}{6}{A metaprogrammed \mintinline {ocaml}{grad_gen} function, which resembles \mintinline {ocaml}{grad_main} but generates a function resembling \mintinline {ocaml}{grad_spec}}{listing.3}{}}
\newlabel{listing:ocaml-pow-gen@cref}{{[listing][3][]3}{[1][6][]6}{}{}{}}
\BKM@entry{id=6,dest={73756273656374696F6E2E322E312E32},srcline={192}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030445C303030655C303030735C303030695C303030675C3030306E5C3030305C3034305C303030535C303030705C303030615C303030635C303030655C3030305C3034305C3030306F5C303030665C3030305C3034305C3030304D5C303030655C303030745C303030615C3030306C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C30303073}
\citation{kiselyov-2024}
\citation{xie-2023}
\citation{chiang-2024}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.2}The Design Space of Metalanguages}{8}{subsection.2.1.2}\protected@file@percent }
\newlabel{subsection:metaprogramming-design}{{2.1.2}{8}{The Design Space of Metalanguages}{subsection.2.1.2}{}}
\newlabel{subsection:metaprogramming-design@cref}{{[subsection][2][2,1]2.1.2}{[1][7][]8}{}{}{}}
\citation{inoue-2012}
\citation{isoda-24,kiselyov-16}
\BKM@entry{id=7,dest={73656374696F6E2E322E32},srcline={1}}{5C3337365C3337375C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{pretnar-15}
\BKM@entry{id=8,dest={73756273656374696F6E2E322E322E31},srcline={4}}{5C3337365C3337375C303030435C3030306F5C3030306D5C303030705C3030306F5C303030735C303030615C303030625C3030306C5C303030655C3030305C3034305C303030615C3030306E5C303030645C3030305C3034305C303030435C303030755C303030735C303030745C3030306F5C3030306D5C303030695C303030735C303030615C303030625C3030306C5C303030655C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C30303073}
\citation{kiselyov-2012}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Effect Handlers}{9}{section.2.2}\protected@file@percent }
\newlabel{section:effects-technical}{{2.2}{9}{Effect Handlers}{section.2.2}{}}
\newlabel{section:effects-technical@cref}{{[section][2][2]2.2}{[1][9][]9}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}Composable and Customisable Effects}{9}{subsection.2.2.1}\protected@file@percent }
\newlabel{subsection:effect-handler-motivation}{{2.2.1}{9}{Composable and Customisable Effects}{subsection.2.2.1}{}}
\newlabel{subsection:effect-handler-motivation@cref}{{[subsection][1][2,2]2.2.1}{[1][9][]9}{}{}{}}
\citation{sivaramakrishnan-21}
\BKM@entry{id=9,dest={73756273656374696F6E2E322E322E32},srcline={58}}{5C3337365C3337375C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030303A5C3030305C3034305C303030415C3030305C3034305C303030435C303030615C3030306C5C303030635C303030755C3030306C5C303030755C303030735C3030305C3034305C303030665C3030306F5C303030725C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{pretnar-15}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.2}$\lambda _{\texttt  {op}}${}: A Calculus for Effect Handlers}{11}{subsection.2.2.2}\protected@file@percent }
\newlabel{subsection:effect-handler-calculus}{{2.2.2}{11}{\texorpdfstring {\efflang {}}{Lambda-Op}: A Calculus for Effect Handlers}{subsection.2.2.2}{}}
\newlabel{subsection:effect-handler-calculus@cref}{{[subsection][2][2,2]2.2.2}{[1][11][]11}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {4}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that returns $(\texttt  {3}, \texttt  {"1;2"})$. It is used as a running example throughout this section.}}{11}{listing.4}\protected@file@percent }
\newlabel{listing:efflang-running-example}{{4}{11}{A \efflang {} program that returns $(\texttt {3}, \texttt {"1;2"})$. It is used as a running example throughout this section}{listing.4}{}}
\newlabel{listing:efflang-running-example@cref}{{[listing][4][]4}{[1][11][]11}{}{}{}}
\citation{pretnar-15}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces The syntax of $\lambda _{\texttt  {op}}$. Terms are syntactically divided into values $v$, computations $c$, and handlers $h$ }}{12}{figure.2.1}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:eff-lang-syntax}{{2.1}{12}{The syntax of \efflang . Terms are syntactically divided into values $v$, computations $c$, and handlers $h$}{figure.2.1}{}}
\newlabel{fig:eff-lang-syntax@cref}{{[figure][1][2]2.1}{[1][12][]12}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Sequencing computations: \texttt  {do} and \texttt  {return}}{12}{subsubsection*.9}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Performing effects: \texttt  {op}, \texttt  {handle}, and \texttt  {continue}}{13}{subsubsection*.11}\protected@file@percent }
\citation{felleisen-87}
\citation{kiselyov-2012}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Operational Semantics}{14}{subsubsection*.13}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces The operational semantics of $\lambda _{\texttt  {op}}$. The semantics is given on configurations of the form $\langle c, E \rangle $, with the brackets dropped for clarity. Rules are divided into three classes: reduction rules $\textsc  {Red-}X$, which perform computation, congruence rules $\textsc  {Cng-}Y$ which manipulate the evaluation context, and effect rules $\textsc  {Eff-}Z$ that are special to $\lambda _{\texttt  {op}}$}}{14}{figure.2.2}\protected@file@percent }
\newlabel{fig:efflang-opsem}{{2.2}{14}{The operational semantics of \efflang . The semantics is given on configurations of the form $\langle c, E \rangle $, with the brackets dropped for clarity. Rules are divided into three classes: reduction rules $\textsc {Red-}X$, which perform computation, congruence rules $\textsc {Cng-}Y$ which manipulate the evaluation context, and effect rules $\textsc {Eff-}Z$ that are special to \efflang }{figure.2.2}{}}
\newlabel{fig:efflang-opsem@cref}{{[figure][2][2]2.2}{[1][14][]14}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Type-and-Effect System}{15}{subsubsection*.15}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces $\lambda _{\texttt  {op}}${} types. Notice that, just as terms are divided into values, computations, and handlers, types are divided into value types ($T$), computation types ($\effectType {T}$), and handler types ($\effectType {T_1} \DOTSB \Relbar \joinrel \Rightarrow \effectType [\Delta ']{T_2}$)}}{16}{figure.2.3}\protected@file@percent }
\newlabel{fig:efflang-type-syntax}{{2.3}{16}{\efflang {} types. Notice that, just as terms are divided into values, computations, and handlers, types are divided into value types ($T$), computation types ($\effectType {T}$), and handler types ($\handlerType {\effectType {T_1}}{\effectType [\Delta ']{T_2}}$)}{figure.2.3}{}}
\newlabel{fig:efflang-type-syntax@cref}{{[figure][3][2]2.3}{[1][15][]16}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces Typing rules for $\lambda _{\texttt  {op}}${} terms}}{17}{figure.2.4}\protected@file@percent }
\newlabel{fig:efflang-type-system}{{2.4}{17}{Typing rules for \efflang {} terms}{figure.2.4}{}}
\newlabel{fig:efflang-type-system@cref}{{[figure][4][2]2.4}{[1][17][]17}{}{}{}}
\citation{bauer-2014}
\zref@newlabel{mdf@pagelabel-1}{\default{2.2.2}\page{18}\abspage{24}\mdf@pagevalue{18}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{2.2.{1}}{Well-typed computation}}{18}{mddefinition.2.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Metatheory}{18}{subsubsection*.17}\protected@file@percent }
\BKM@entry{id=10,dest={73756273656374696F6E2E322E322E33},srcline={567}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030445C303030655C303030735C303030695C303030675C3030306E5C3030305C3034305C303030535C303030705C303030615C303030635C303030655C3030305C3034305C3030306F5C303030665C3030305C3034305C303030455C303030665C303030665C303030655C303030635C303030745C3030305C3034305C303030485C303030615C3030306E5C303030645C3030306C5C303030655C303030725C30303073}
\citation{xie-2022}
\citation{xie-2022}
\citation{hillestrom-2018}
\zref@newlabel{mdf@pagelabel-2}{\default{2.2.2}\page{19}\abspage{25}\mdf@pagevalue{19}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{2.2.{1}}{Progress}}{19}{mdtheorem.2.2.1}\protected@file@percent }
\newlabel{thm:progress}{{2.2.{1}}{19}{Metatheory}{mdtheorem.2.2.1}{}}
\newlabel{thm:progress@cref}{{[mdtheorem][1][2,2]2.2.{1}}{[1][18][]19}{}{}{}}
\zref@newlabel{mdf@pagelabel-3}{\default{2.2.2}\page{19}\abspage{25}\mdf@pagevalue{19}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{2.2.{2}}{Preservation}}{19}{mdtheorem.2.2.2}\protected@file@percent }
\newlabel{thm:preservation}{{2.2.{2}}{19}{Metatheory}{mdtheorem.2.2.2}{}}
\newlabel{thm:preservation@cref}{{[mdtheorem][2][2,2]2.2.{2}}{[1][19][]19}{}{}{}}
\zref@newlabel{mdf@pagelabel-4}{\default{2.2.2}\page{19}\abspage{25}\mdf@pagevalue{19}}
\@writefile{thm}{\contentsline {mdcorollary}{{Corollary}{2.2.{1}}{Type Safety}}{19}{mdcorollary.2.2.1}\protected@file@percent }
\newlabel{thm:type-safety}{{2.2.{1}}{19}{Metatheory}{mdcorollary.2.2.1}{}}
\newlabel{thm:type-safety@cref}{{[mdcorollary][1][2,2]2.2.{1}}{[1][19][]19}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.3}The Design Space of Effect Handlers}{19}{subsection.2.2.3}\protected@file@percent }
\newlabel{subsection:effect-handler-design}{{2.2.3}{19}{The Design Space of Effect Handlers}{subsection.2.2.3}{}}
\newlabel{subsection:effect-handler-design@cref}{{[subsection][3][2,2]2.2.3}{[1][19][]19}{}{}{}}
\citation{phipps-costin-2023}
\citation{isoda-24}
\citation{phipps-costin-2023}
\citation{phipps-costin-2023}
\BKM@entry{id=11,dest={73656374696F6E2E322E33},srcline={1}}{5C3337365C3337375C303030535C303030635C3030306F5C303030705C303030655C3030305C3034305C303030455C303030785C303030745C303030725C303030755C303030735C303030695C3030306F5C3030306E}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Scope Extrusion}{20}{section.2.3}\protected@file@percent }
\newlabel{section:scope-extrusion-technical}{{2.3}{20}{Scope Extrusion}{section.2.3}{}}
\newlabel{section:scope-extrusion-technical@cref}{{[section][3][2]2.3}{[1][20][]20}{}{}{}}
\citation{kiselyov-14,kiselyov-16}
\citation{kiselyov-16}
\citation{kiselyov-14}
\BKM@entry{id=12,dest={73756273656374696F6E2E322E332E31},srcline={57}}{}
\citation{kiselyov-16,isoda-24}
\citation{kiselyov-14}
\@writefile{lol}{\contentsline {listing}{\numberline {5}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that evaluates to the $\texttt  {Var}(x_{\mathbb  {N}})$. The AST is ill-scoped, and thus exhibits scope extrusion. It is used as a running example.}}{21}{listing.5}\protected@file@percent }
\newlabel{listing:efflang-scope-extrusion}{{5}{21}{A \efflang {} program that evaluates to the $\Var {x}{\mathbb {N}}$. The AST is ill-scoped, and thus exhibits scope extrusion. It is used as a running example}{listing.5}{}}
\newlabel{listing:efflang-scope-extrusion@cref}{{[listing][5][]5}{[1][21][]21}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {6}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that may, or may not demonstrate scope extrusion. The final result of the program is well-scoped, but not all intermediate results are well-scoped.}}{21}{listing.6}\protected@file@percent }
\newlabel{listing:efflang-maybe-scope-extrusion}{{6}{21}{A \efflang {} program that may, or may not demonstrate scope extrusion. The final result of the program is well-scoped, but not all intermediate results are well-scoped}{listing.6}{}}
\newlabel{listing:efflang-maybe-scope-extrusion@cref}{{[listing][6][]6}{[1][21][]21}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Existing Solutions to the Scope Extrusion Problem}{21}{subsection.2.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Lazy Dynamic Check}{21}{subsubsection*.19}\protected@file@percent }
\newlabel{subsubsection:lazy-dynamic-check}{{2.3.1}{21}{Lazy Dynamic Check}{subsubsection*.19}{}}
\newlabel{subsubsection:lazy-dynamic-check@cref}{{[subsection][1][2,3]2.3.1}{[1][21][]21}{}{}{}}
\citation{kiselyov-14}
\citation{kiselyov-14}
\@writefile{lol}{\contentsline {listing}{\numberline {7}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that evaluates to the $\texttt  {Var}(x_{\mathbb  {N}})$. Executing the entire program to determine if it exhibits scope extrusion is inefficient.}}{22}{listing.7}\protected@file@percent }
\newlabel{listing:efflang-lazy-scope-extrusion-inefficient}{{7}{22}{A \efflang {} program that evaluates to the $\Var {x}{\mathbb {N}}$. Executing the entire program to determine if it exhibits scope extrusion is inefficient}{listing.7}{}}
\newlabel{listing:efflang-lazy-scope-extrusion-inefficient@cref}{{[listing][7][]7}{[1][22][]22}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Eager Dynamic Check}{22}{subsubsection*.21}\protected@file@percent }
\newlabel{subsubsection:eager-dynamic-check}{{2.3.1}{22}{Eager Dynamic Check}{subsubsection*.21}{}}
\newlabel{subsubsection:eager-dynamic-check@cref}{{[subsection][1][2,3]2.3.1}{[1][22][]22}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {8}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that is a slight variation of \Cref  {listing:efflang-maybe-scope-extrusion}, but that (unlike \Cref  {listing:efflang-maybe-scope-extrusion}) passes the Eager Dynamic Check.}}{22}{listing.8}\protected@file@percent }
\newlabel{listing:efflang-maybe-not-scope-extrusion}{{8}{22}{A \efflang {} program that is a slight variation of \Cref {listing:efflang-maybe-scope-extrusion}, but that (unlike \Cref {listing:efflang-maybe-scope-extrusion}) passes the Eager Dynamic Check}{listing.8}{}}
\newlabel{listing:efflang-maybe-not-scope-extrusion@cref}{{[listing][8][]8}{[1][22][]22}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Refined Environment Classifiers}{23}{subsubsection*.23}\protected@file@percent }
\newlabel{subsubsection:refined-environment-classifiers}{{2.3.1}{23}{Refined Environment Classifiers}{subsubsection*.23}{}}
\newlabel{subsubsection:refined-environment-classifiers@cref}{{[subsection][1][2,3]2.3.1}{[1][23][]23}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.5}{\ignorespaces The AST of $(\lambda f. \lambda x. f x) (\lambda y.y)$, where each scope is labelled with the corresponding environment classifier.}}{24}{figure.2.5}\protected@file@percent }
\newlabel{fig:refined-enviroment-classifiers-basic}{{2.5}{24}{The AST of $(\lambda f. \lambda x. f x) (\lambda y.y)$, where each scope is labelled with the corresponding environment classifier}{figure.2.5}{}}
\newlabel{fig:refined-enviroment-classifiers-basic@cref}{{[figure][5][2]2.5}{[1][23][]24}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.6}{\ignorespaces Visual depiction of the \textsc  {(C-Abs)} typing rule.}}{25}{figure.2.6}\protected@file@percent }
\newlabel{fig:cref-typing-rule}{{2.6}{25}{Visual depiction of the \textsc {(C-Abs)} typing rule}{figure.2.6}{}}
\newlabel{fig:cref-typing-rule@cref}{{[figure][6][2]2.6}{[1][25][]25}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.7}{\ignorespaces The ``AST'' of the scope extrusion example, \Cref  {listing:efflang-scope-extrusion}. Notice that in place of AST nodes, we may now have compile-time executable code that \textit  {evaluate} to AST nodes.}}{25}{figure.2.7}\protected@file@percent }
\newlabel{fig:classifier-ast-scope-extrusion}{{2.7}{25}{The ``AST'' of the scope extrusion example, \Cref {listing:efflang-scope-extrusion}. Notice that in place of AST nodes, we may now have compile-time executable code that \textit {evaluate} to AST nodes}{figure.2.7}{}}
\newlabel{fig:classifier-ast-scope-extrusion@cref}{{[figure][7][2]2.7}{[1][25][]25}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {9}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that passes the Eager and Lazy Dynamic Checks, but is not well-typed under the Refined Environment Classifiers type system.}}{26}{listing.9}\protected@file@percent }
\newlabel{listing:efflang-no-scope-extrusion}{{9}{26}{A \efflang {} program that passes the Eager and Lazy Dynamic Checks, but is not well-typed under the Refined Environment Classifiers type system}{listing.9}{}}
\newlabel{listing:efflang-no-scope-extrusion@cref}{{[listing][9][]9}{[1][26][]26}{}{}{}}
\BKM@entry{id=13,dest={636861707465722E33},srcline={3}}{5C3337365C3337375C303030435C303030615C3030306C5C303030635C303030755C3030306C5C303030755C30303073}
\citation{xie-2023}
\BKM@entry{id=14,dest={73656374696F6E2E332E31},srcline={45}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030535C3030306F5C303030755C303030725C303030635C303030655C3030305C3034305C3030304C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C3030303A5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030515C303030755C3030306F5C303030745C303030655C3030302D5C303030535C303030705C3030306C5C303030695C303030635C30303065}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Calculus}{27}{chapter.3}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\newlabel{chapter:calculus}{{3}{27}{Calculus}{chapter.3}{}}
\newlabel{chapter:calculus@cref}{{[chapter][3][]3}{[1][27][]27}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces $\lambda _{\equote [\texttt  {op}]}${} is first elaborated into $\lambda _{\texttt  {AST}(\texttt  {op})}${}, which is then executed \textbf  {at compile-time} to obtain the AST of a run-time $\lambda _{\texttt  {op}}${} program.}}{27}{figure.3.1}\protected@file@percent }
\newlabel{fig:elaboration-then-execution}{{3.1}{27}{\calculusName {} is first elaborated into \coreLang {}, which is then executed \textbf {at compile-time} to obtain the AST of a run-time \efflang {} program}{figure.3.1}{}}
\newlabel{fig:elaboration-then-execution@cref}{{[figure][1][3]3.1}{[1][27][]27}{}{}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}The Source Language: $\lambda _{\equote [\texttt  {op}]}${}}{27}{section.3.1}\protected@file@percent }
\newlabel{section:source-lang}{{3.1}{27}{The Source Language: \texorpdfstring {\sourceLang {}}{Lambda-Op-Quote-Splice}}{section.3.1}{}}
\newlabel{section:source-lang@cref}{{[section][1][3]3.1}{[1][27][]27}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces $\lambda _{\equote [\texttt  {op}]}${} syntax. The syntax is broadly the same as $\lambda _{\texttt  {op}}${}, except with the addition of quotes and splices.}}{27}{figure.3.2}\protected@file@percent }
\newlabel{fig:source-syntax}{{3.2}{27}{\sourceLang {} syntax. The syntax is broadly the same as \efflang {}, except with the addition of quotes and splices}{figure.3.2}{}}
\newlabel{fig:source-syntax@cref}{{[figure][2][3]3.2}{[1][27][]27}{}{}{}}
\BKM@entry{id=15,dest={73756273656374696F6E2E332E312E31},srcline={64}}{5C3337365C3337375C303030545C303030795C303030705C303030655C3030305C3034305C303030535C303030795C303030735C303030745C303030655C3030306D}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces $\lambda _{\equote [\texttt  {op}]}${} types. Types are stratified into two levels, $0$ and $-1$. Similarly, effects are stratified into two levels, $\xi $ (for run-time effects) and $\Delta $ (for compile-time effects). The \textsf  {Code} type allows for compile-time programs to manipulate ASTs of run-time code.}}{28}{figure.3.3}\protected@file@percent }
\newlabel{fig:source-types}{{3.3}{28}{\sourceLang {} types. Types are stratified into two levels, $0$ and $-1$. Similarly, effects are stratified into two levels, $\xi $ (for run-time effects) and $\Delta $ (for compile-time effects). The \textsf {Code} type allows for compile-time programs to manipulate ASTs of run-time code}{figure.3.3}{}}
\newlabel{fig:source-types@cref}{{[figure][3][3]3.3}{[1][28][]28}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}Type System}{28}{subsection.3.1.1}\protected@file@percent }
\newlabel{subsection:sourcelang-type-system}{{3.1.1}{28}{Type System}{subsection.3.1.1}{}}
\newlabel{subsection:sourcelang-type-system@cref}{{[subsection][1][3,1]3.1.1}{[1][28][]28}{}{}{}}
\citation{xie-2023}
\zref@newlabel{mdf@pagelabel-5}{\default{3.1.1}\page{29}\abspage{35}\mdf@pagevalue{29}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{3.1.{1}}{Level}}{29}{mddefinition.3.1.1}\protected@file@percent }
\newlabel{dfn:level}{{3.1.{1}}{29}{Type System}{mddefinition.3.1.1}{}}
\newlabel{dfn:level@cref}{{[mddefinition][1][3,1]3.1.{1}}{[1][29][]29}{}{}{}}
\citation{xie-2023}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Typing Judgement}{30}{subsubsection*.25}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces Transitions between modes \textbf  {\textsf  {\textcolor {compile}{c}}}{}, \textbf  {\textsf  {\textcolor {splice}{s}}}{}, and \textbf  {\textsf  {\textcolor {quote}{q}}}{}. Top-level splices transition from \textbf  {\textsf  {\textcolor {compile}{c}}}{} to \textbf  {\textsf  {\textcolor {splice}{s}}}{}, quotes transition from \textbf  {\textsf  {\textcolor {splice}{s}}}{} to \textbf  {\textsf  {\textcolor {quote}{q}}}{}, and splices (under quotes) transition from \textbf  {\textsf  {\textcolor {quote}{q}}}{} to \textbf  {\textsf  {\textcolor {splice}{s}}}{}.}}{31}{figure.3.4}\protected@file@percent }
\newlabel{fig:compiler-mode-transitions}{{3.4}{31}{Transitions between modes \compilemode {}, \splicemode {}, and \quotemode {}. Top-level splices transition from \compilemode {} to \splicemode {}, quotes transition from \splicemode {} to \quotemode {}, and splices (under quotes) transition from \quotemode {} to \splicemode {}}{figure.3.4}{}}
\newlabel{fig:compiler-mode-transitions@cref}{{[figure][4][3]3.4}{[1][31][]31}{}{}{}}
\BKM@entry{id=16,dest={73656374696F6E2E332E32},srcline={541}}{5C3337365C3337375C303030545C303030685C303030655C3030305C3034305C303030435C3030306F5C303030725C303030655C3030305C3034305C3030304C5C303030615C3030306E5C303030675C303030755C303030615C303030675C303030655C3030303A5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030415C303030535C30303054}
\zref@newlabel{mdf@pagelabel-6}{\default{3.1.1}\page{32}\abspage{38}\mdf@pagevalue{32}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{3.1.{2}}{Well-typed expression}}{32}{mddefinition.3.1.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces The \textbf  {\textsf  {\textcolor {compile}{c}}}{}-mode and \textbf  {\textsf  {\textcolor {quote}{q}}}{}-mode typing rules for $\lambda _{\equote [\texttt  {op}]}${}. The rules are nearly identical to the $\lambda _{\texttt  {op}}${} typing rules. Two additional rules, \textsc  {(\textbf  {\textsf  {\textcolor {compile}{c}}}{}-Splice)} (top-level splice) and \textsc  {(\textbf  {\textsf  {\textcolor {quote}{q}}}{}-Splice)} formalise the transition to \textbf  {\textsf  {\textcolor {splice}{s}}}{}-mode.}}{33}{figure.3.5}\protected@file@percent }
\newlabel{fig:source-cq-typing-rules}{{3.5}{33}{The \compilemode {}-mode and \quotemode {}-mode typing rules for \sourceLang {}. The rules are nearly identical to the \efflang {} typing rules. Two additional rules, \textsc {(\compilemode {}-Splice)} (top-level splice) and \textsc {(\quotemode {}-Splice)} formalise the transition to \splicemode {}-mode}{figure.3.5}{}}
\newlabel{fig:source-cq-typing-rules@cref}{{[figure][5][3]3.5}{[1][32][]33}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.6}{\ignorespaces The \textbf  {\textsf  {\textcolor {splice}{s}}}{}-mode typing rules for $\lambda _{\equote [\texttt  {op}]}${}. The rules (sans levels) are exactly identical to the $\lambda _{\texttt  {op}}${} typing rules. The additional \textsc  {\textbf  {\textsf  {\textcolor {splice}{s}}}{}-Quote} rule makes level $0$ code available at compile-time. }}{34}{figure.3.6}\protected@file@percent }
\newlabel{fig:source-s-typing-rules}{{3.6}{34}{The \splicemode {}-mode typing rules for \sourceLang {}. The rules (sans levels) are exactly identical to the \efflang {} typing rules. The additional \textsc {\splicemode {}-Quote} rule makes level $0$ code available at compile-time}{figure.3.6}{}}
\newlabel{fig:source-s-typing-rules@cref}{{[figure][6][3]3.6}{[1][32][]34}{}{}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}The Core Language: $\lambda _{\texttt  {AST}(\texttt  {op})}${}}{35}{section.3.2}\protected@file@percent }
\newlabel{section:core-lang}{{3.2}{35}{The Core Language: \texorpdfstring {\coreLang {}}{Lambda-Op-AST}}{section.3.2}{}}
\newlabel{section:core-lang@cref}{{[section][2][3]3.2}{[1][32][]35}{}{}{}}
\BKM@entry{id=17,dest={73756273656374696F6E2E332E322E31},srcline={640}}{5C3337365C3337375C3030304F5C303030705C303030655C303030725C303030615C303030745C303030695C3030306F5C3030306E5C303030615C3030306C5C3030305C3034305C303030535C303030655C3030306D5C303030615C3030306E5C303030745C303030695C303030635C30303073}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.1}Operational Semantics}{36}{subsection.3.2.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.7}{\ignorespaces $\lambda _{\texttt  {AST}(\texttt  {op})}${} syntax. The syntax is broadly the same as $\lambda _{\texttt  {op}}${}, except with the addition of AST constructors and scope extrusion checking machinery.}}{37}{figure.3.7}\protected@file@percent }
\newlabel{fig:source-syntax}{{3.7}{37}{\coreLang {} syntax. The syntax is broadly the same as \efflang {}, except with the addition of AST constructors and scope extrusion checking machinery}{figure.3.7}{}}
\newlabel{fig:source-syntax@cref}{{[figure][7][3]3.7}{[1][36][]37}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Configurations}{37}{subsubsection*.27}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline AST Rules}{37}{subsubsection*.29}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Scope Extrusion Checking Rules}{37}{subsubsection*.31}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3.8}{\ignorespaces Selected rules of the $\lambda _{\texttt  {AST}(\texttt  {op})}${} operational semantics. Many of the rules can be trivially adapted from the $\lambda _{\texttt  {op}}${} semantics (\Cref  {fig:efflang-opsem}). The muting and unmuting of variables is complex, and will be best explained when we discuss scope extrusion checks. For now, these mechanisms are \textbf  {\textcolor {coreHighlight}{highlighted}}.}}{38}{figure.3.8}\protected@file@percent }
\newlabel{fig:corelang-opsem}{{3.8}{38}{Selected rules of the \coreLang {} operational semantics. Many of the rules can be trivially adapted from the \efflang {} semantics (\Cref {fig:efflang-opsem}). The muting and unmuting of variables is complex, and will be best explained when we discuss scope extrusion checks. For now, these mechanisms are \textbf {\textcolor {coreHighlight}{highlighted}}}{figure.3.8}{}}
\newlabel{fig:corelang-opsem@cref}{{[figure][8][3]3.8}{[1][36][]38}{}{}{}}
\BKM@entry{id=18,dest={73756273656374696F6E2E332E322E32},srcline={729}}{5C3337365C3337375C303030545C303030795C303030705C303030655C3030305C3034305C303030535C303030795C303030735C303030745C303030655C3030306D}
\@writefile{lof}{\contentsline {figure}{\numberline {3.9}{\ignorespaces The types of $\lambda _{\texttt  {AST}(\texttt  {op})}${}. $\lambda _{\texttt  {AST}(\texttt  {op})}${} types extend $\lambda _{\texttt  {op}}${} types with an \textsf  {AST} type (for ASTs), and a \textsf  {Binder} type}}{39}{figure.3.9}\protected@file@percent }
\newlabel{fig:core-types}{{3.9}{39}{The types of \coreLang {}. \coreLang {} types extend \efflang {} types with an \textsf {AST} type (for ASTs), and a \textsf {Binder} type}{figure.3.9}{}}
\newlabel{fig:core-types@cref}{{[figure][9][3]3.9}{[1][39][]39}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.2}Type System}{39}{subsection.3.2.2}\protected@file@percent }
\citation{scherer-2017}
\BKM@entry{id=19,dest={73756273656374696F6E2E332E322E33},srcline={859}}{5C3337365C3337375C303030495C3030306D5C303030705C3030306C5C303030655C3030306D5C303030655C3030306E5C303030745C303030615C303030745C303030695C3030306F5C3030306E}
\@writefile{lof}{\contentsline {figure}{\numberline {3.10}{\ignorespaces Selected $\lambda _{\texttt  {AST}(\texttt  {op})}${} typing rules}}{40}{figure.3.10}\protected@file@percent }
\newlabel{fig:core-typing-rules}{{3.10}{40}{Selected \coreLang {} typing rules}{figure.3.10}{}}
\newlabel{fig:core-typing-rules@cref}{{[figure][10][3]3.10}{[1][40][]40}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Typing Rules}{40}{subsubsection*.33}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-7}{\default{3.2.2}\page{40}\abspage{46}\mdf@pagevalue{40}}
\@writefile{thm}{\contentsline {mddefinition}{{Definition}{3.2.{1}}{Well-typed term}}{40}{mddefinition.3.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.3}Implementation}{40}{subsection.3.2.3}\protected@file@percent }
\BKM@entry{id=20,dest={73656374696F6E2E332E33},srcline={873}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306F5C3030306E5C3030305C3034305C303030665C303030725C3030306F5C3030306D5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030515C303030755C3030306F5C303030745C303030655C3030302D5C303030535C303030705C3030306C5C303030695C303030635C303030655C3030305C3034305C303030745C3030306F5C3030305C3034305C3030304C5C303030615C3030306D5C303030625C303030645C303030615C3030302D5C3030304F5C303030705C3030302D5C303030415C303030535C30303054}
\BKM@entry{id=21,dest={73756273656374696F6E2E332E332E31},srcline={890}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306E5C303030675C3030305C3034305C303030545C303030795C303030705C303030655C30303073}
\BKM@entry{id=22,dest={73756273656374696F6E2E332E332E32},srcline={906}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306E5C303030675C3030305C3034305C303030435C3030306F5C3030306E5C303030745C303030655C303030785C303030745C30303073}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Elaboration from $\lambda _{\equote [\texttt  {op}]}${} to $\lambda _{\texttt  {AST}(\texttt  {op})}${}}{41}{section.3.3}\protected@file@percent }
\newlabel{section:elaboration}{{3.3}{41}{Elaboration from \texorpdfstring {\sourceLang {}}{Lambda-Op-Quote-Splice} to \texorpdfstring {\coreLang {}}{Lambda-Op-AST}}{section.3.3}{}}
\newlabel{section:elaboration@cref}{{[section][3][3]3.3}{[1][41][]41}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}Elaborating Types}{41}{subsection.3.3.1}\protected@file@percent }
\BKM@entry{id=23,dest={73756273656374696F6E2E332E332E33},srcline={918}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306E5C303030675C3030305C3034305C303030545C303030655C303030725C3030306D5C30303073}
\BKM@entry{id=24,dest={73756273656374696F6E2E332E332E34},srcline={950}}{5C3337365C3337375C303030455C3030306C5C303030615C303030625C3030306F5C303030725C303030615C303030745C303030695C3030306E5C303030675C3030305C3034305C303030545C303030795C303030705C303030695C3030306E5C303030675C3030305C3034305C3030304A5C303030755C303030645C303030675C303030655C3030306D5C303030655C3030306E5C303030745C30303073}
\@writefile{lof}{\contentsline {figure}{\numberline {3.11}{\ignorespaces Selected term elaboration rules from $\lambda _{\equote [\texttt  {op}]}${} to $\lambda _{\texttt  {AST}(\texttt  {op})}${}. Elaboration is moderated by the compiler mode. In \textbf  {\textsf  {\textcolor {compile}{c}}}{} and \textbf  {\textsf  {\textcolor {quote}{q}}}{}, elaboration builds ASTs. In \textbf  {\textsf  {\textcolor {splice}{s}}}{}-mode, elaboration is effectively the identity. }}{42}{figure.3.11}\protected@file@percent }
\newlabel{fig:term-elaboration}{{3.11}{42}{Selected term elaboration rules from \sourceLang {} to \coreLang {}. Elaboration is moderated by the compiler mode. In \compilemode {} and \quotemode {}, elaboration builds ASTs. In \splicemode {}-mode, elaboration is effectively the identity}{figure.3.11}{}}
\newlabel{fig:term-elaboration@cref}{{[figure][11][3]3.11}{[1][42][]42}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}Elaborating Contexts}{42}{subsection.3.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}Elaborating Terms}{42}{subsection.3.3.3}\protected@file@percent }
\BKM@entry{id=25,dest={73656374696F6E2E332E34},srcline={969}}{5C3337365C3337375C3030304D5C303030655C303030745C303030615C303030745C303030685C303030655C3030306F5C303030725C30303079}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.4}Elaborating Typing Judgements}{43}{subsection.3.3.4}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3.4}Metatheory}{43}{section.3.4}\protected@file@percent }
\newlabel{section:metatheory}{{3.4}{43}{Metatheory}{section.3.4}{}}
\newlabel{section:metatheory@cref}{{[section][4][3]3.4}{[1][43][]43}{}{}{}}
\zref@newlabel{mdf@pagelabel-8}{\default{3.4}\page{43}\abspage{49}\mdf@pagevalue{43}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{3.4.{1}}{Elaboration Preservation}}{43}{mdtheorem.3.4.1}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-9}{\default{3.4}\page{43}\abspage{49}\mdf@pagevalue{43}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{3.4.{2}}{Progress}}{43}{mdtheorem.3.4.2}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-10}{\default{3.4}\page{44}\abspage{50}\mdf@pagevalue{44}}
\@writefile{thm}{\contentsline {mdtheorem}{{Theorem}{3.4.{3}}{Reduction Preservation}}{44}{mdtheorem.3.4.3}\protected@file@percent }
\zref@newlabel{mdf@pagelabel-11}{\default{3.4}\page{44}\abspage{50}\mdf@pagevalue{44}}
\@writefile{thm}{\contentsline {mdcorollary}{{Corollary}{3.4.{1}}{Type Safety}}{44}{mdcorollary.3.4.1}\protected@file@percent }
\newlabel{cor:core-type-safety}{{3.4.{1}}{44}{Metatheory}{mdcorollary.3.4.1}{}}
\newlabel{cor:core-type-safety@cref}{{[mdcorollary][1][3,4]3.4.{1}}{[1][44][]44}{}{}{}}
\zref@newlabel{mdf@pagelabel-12}{\default{3.4}\page{44}\abspag