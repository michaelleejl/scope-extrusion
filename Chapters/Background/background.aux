\relax 
\providecommand\hyper@newdestlabel[2]{}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Background}{7}{chapter.2}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Metaprogramming}{7}{section.2.1}\protected@file@percent }
\newlabel{section:metaprogramming-technical}{{2.1}{7}{Metaprogramming}{section.2.1}{}}
\newlabel{section:metaprogramming-technical@cref}{{[section][1][2]2.1}{[1][7][]7}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Metaprogramming for Fast and Maintainable Code}{7}{subsection.2.1.1}\protected@file@percent }
\newlabel{subsection:metaprogramming-motivation}{{2.1.1}{7}{Metaprogramming for Fast and Maintainable Code}{subsection.2.1.1}{}}
\newlabel{subsection:metaprogramming-motivation@cref}{{[subsection][1][2,1]2.1.1}{[1][7][]7}{}{}{}}
\citation{tratt-2008}
\citation{yallop-2023}
\citation{servetto-2013}
\citation{wickham-2019}
\citation{vandebon-2021}
\citation{rice-53}
\citation{robinson-01}
\@writefile{lol}{\contentsline {listing}{\numberline {1}{\ignorespaces A maintainable implementation of \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad}}}}{8}{listing.1}\protected@file@percent }
\newlabel{listing:ocaml-grad-main}{{1}{8}{A maintainable implementation of \mintinline {ocaml}{grad}}{listing.1}{}}
\newlabel{listing:ocaml-grad-main@cref}{{[listing][1][]1}{[1][8][]8}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {2}{\ignorespaces A fast implementation of \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{grad}}, assuming $f =$ \text  {\FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{Compose(Tanh, Sin)}}}}}{8}{listing.2}\protected@file@percent }
\newlabel{listing:ocaml-grad-fast}{{2}{8}{A fast implementation of \mintinline {ocaml}{grad}, assuming $f =$ \text {\mintinline {ocaml}{Compose(Tanh, Sin)}}}{listing.2}{}}
\newlabel{listing:ocaml-grad-fast@cref}{{[listing][2][]2}{[1][8][]8}{}{}{}}
\citation{jax-grad-metaprogramming}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Speeding up exponentiation with Metaprogramming}{9}{subsubsection*.4}\protected@file@percent }
\@writefile{lol}{\contentsline {listing}{\numberline {3}{\ignorespaces A maintainable implementation of an exponentiation function}}{9}{listing.3}\protected@file@percent }
\newlabel{listing:ocaml-pow-maintainable}{{3}{9}{A maintainable implementation of an exponentiation function}{listing.3}{}}
\newlabel{listing:ocaml-pow-maintainable@cref}{{[listing][3][]3}{[1][9][]9}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {4}{\ignorespaces An efficient implementation of exponentiation, assuming \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{n}} $=$ \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{2}}}}{9}{listing.4}\protected@file@percent }
\newlabel{listing:ocaml-pow-fast}{{4}{9}{An efficient implementation of exponentiation, assuming \mintinline {ocaml}{n} $=$ \mintinline {ocaml}{2}}{listing.4}{}}
\newlabel{listing:ocaml-pow-fast@cref}{{[listing][4][]4}{[1][9][]9}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {5}{\ignorespaces A meta-programmed \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{pow_gen}} function, which resembles \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{pow}} but generates \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {ocaml}{square}}}}{10}{listing.5}\protected@file@percent }
\newlabel{listing:ocaml-pow-gen}{{5}{10}{A meta-programmed \mintinline {ocaml}{pow_gen} function, which resembles \mintinline {ocaml}{pow} but generates \mintinline {ocaml}{square}}{listing.5}{}}
\newlabel{listing:ocaml-pow-gen@cref}{{[listing][5][]5}{[1][10][]10}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {6}{\ignorespaces In \texttt  {MacoCaml}, \FVExtraRobustCommand \RobustMintInline \FVExtraAlwaysUnexpanded {\FVExtraUnexpandedReadStarOArgMArgBVArg {\macocamlLexer }{macro}} allows for definitions to be shared across top-level splices}}{11}{listing.6}\protected@file@percent }
\newlabel{listing:ocaml-macros}{{6}{11}{In \texttt {MacoCaml}, \mintinline {\macocamlLexer }{macro} allows for definitions to be shared across top-level splices}{listing.6}{}}
\newlabel{listing:ocaml-macros@cref}{{[listing][6][]6}{[1][11][]11}{}{}{}}
\citation{kiselyov-2024}
\citation{mainland-2012}
\citation{kiselyov-14}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.2}The Design Space of Metalanguages}{12}{subsection.2.1.2}\protected@file@percent }
\newlabel{subsection:metaprogramming-design}{{2.1.2}{12}{The Design Space of Metalanguages}{subsection.2.1.2}{}}
\newlabel{subsection:metaprogramming-design@cref}{{[subsection][2][2,1]2.1.2}{[1][12][]12}{}{}{}}
\citation{xie-2023}
\citation{chiang-2024}
\citation{inoue-2012}
\citation{isoda-24,kiselyov-16}
\citation{pretnar-15}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Effect Handlers}{13}{section.2.2}\protected@file@percent }
\newlabel{section:effects-technical}{{2.2}{13}{Effect Handlers}{section.2.2}{}}
\newlabel{section:effects-technical@cref}{{[section][2][2]2.2}{[1][13][]13}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}Composable and Customisable Effects}{13}{subsection.2.2.1}\protected@file@percent }
\newlabel{subsection:effect-handler-motivation}{{2.2.1}{13}{Composable and Customisable Effects}{subsection.2.2.1}{}}
\newlabel{subsection:effect-handler-motivation@cref}{{[subsection][1][2,2]2.2.1}{[1][13][]13}{}{}{}}
\citation{kiselyov-2012}
\citation{sivaramakrishnan-21}
\citation{pretnar-15}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces The syntax of $\lambda _{\texttt  {op}}$. Terms are syntactically divided into values $v$ and computations $c$ }}{16}{figure.caption.5}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:eff-lang-syntax}{{2.1}{16}{The syntax of \efflang . Terms are syntactically divided into values $v$ and computations $c$}{figure.caption.5}{}}
\newlabel{fig:eff-lang-syntax@cref}{{[figure][1][2]2.1}{[1][16][]16}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.2}$\lambda _{\texttt  {op}}${}: A Calculus for Effect Handlers}{16}{subsection.2.2.2}\protected@file@percent }
\newlabel{subsection:effect-handler-calculus}{{2.2.2}{16}{\efflang {}: A Calculus for Effect Handlers}{subsection.2.2.2}{}}
\newlabel{subsection:effect-handler-calculus@cref}{{[subsection][2][2,2]2.2.2}{[1][15][]16}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {7}{\ignorespaces An $\lambda _{\texttt  {op}}${} program that returns $(\texttt  {3}, \texttt  {"1;2"})$. It will be used as a running example throughout this section.}}{16}{listing.7}\protected@file@percent }
\newlabel{listing:efflang-running-example}{{7}{16}{An \efflang {} program that returns $(\texttt {3}, \texttt {"1;2"})$. It will be used as a running example throughout this section}{listing.7}{}}
\newlabel{listing:efflang-running-example@cref}{{[listing][7][]7}{[1][16][]16}{}{}{}}
\citation{pretnar-15}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Sequencing computations: \texttt  {do} and \texttt  {return}}{17}{subsubsection*.7}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Performing effects: \texttt  {op}, \texttt  {handle}, and \texttt  {continue}}{17}{subsubsection*.9}\protected@file@percent }
\citation{felleisen-87}
\citation{kiselyov-2012}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Operational Semantics}{19}{subsubsection*.11}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces The operational semantics of $\lambda _{\texttt  {op}}$. The semantics is given on configurations of the form $\langle c, E \rangle $, with the brackets dropped for clarity. Rules are divided into three classes: reduction rules $\textsc  {Red-}X$, which perform computation, congruence rules $\textsc  {Cng-}Y$ which manipulate the evaluation context, and effect rules $\textsc  {Eff-}Z$ that are special to $\lambda _{\texttt  {op}}$}}{19}{figure.caption.12}\protected@file@percent }
\newlabel{fig:efflang-opsem}{{2.2}{19}{The operational semantics of \efflang . The semantics is given on configurations of the form $\langle c, E \rangle $, with the brackets dropped for clarity. Rules are divided into three classes: reduction rules $\textsc {Red-}X$, which perform computation, congruence rules $\textsc {Cng-}Y$ which manipulate the evaluation context, and effect rules $\textsc {Eff-}Z$ that are special to \efflang }{figure.caption.12}{}}
\newlabel{fig:efflang-opsem@cref}{{[figure][2][2]2.2}{[1][19][]19}{}{}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces $\lambda _{\texttt  {op}}${} types. Notice that, just as terms are divided into values and computations, types are divided into value types ($T$) and computation types ($\effectType {T}$)}}{21}{figure.caption.15}\protected@file@percent }
\newlabel{fig:efflang-type-syntax}{{2.3}{21}{\efflang {} types. Notice that, just as terms are divided into values and computations, types are divided into value types ($T$) and computation types ($\effectType {T}$)}{figure.caption.15}{}}
\newlabel{fig:efflang-type-syntax@cref}{{[figure][3][2]2.3}{[1][20][]21}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Type-and-Effect System}{21}{subsubsection*.14}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces Typing rules for $\lambda _{\texttt  {op}}${} terms}}{22}{figure.caption.16}\protected@file@percent }
\newlabel{fig:efflang-type-system}{{2.4}{22}{Typing rules for \efflang {} terms}{figure.caption.16}{}}
\newlabel{fig:efflang-type-system@cref}{{[figure][4][2]2.4}{[1][22][]22}{}{}{}}
\citation{kiselyov-14,kiselyov-16}
\citation{kiselyov-16}
\citation{kiselyov-14}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.3}The Design Space of Effect Handlers}{24}{subsection.2.2.3}\protected@file@percent }
\newlabel{subsection:effect-handler-design}{{2.2.3}{24}{The Design Space of Effect Handlers}{subsection.2.2.3}{}}
\newlabel{subsection:effect-handler-design@cref}{{[subsection][3][2,2]2.2.3}{[1][24][]24}{}{}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Scope Extrusion}{24}{section.2.3}\protected@file@percent }
\newlabel{section:scope-extrusion-technical}{{2.3}{24}{Scope Extrusion}{section.2.3}{}}
\newlabel{section:scope-extrusion-technical@cref}{{[section][3][2]2.3}{[1][24][]24}{}{}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {8}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that evaluates to the $\texttt  {Var}(x_{\mathbb  {N}})$. The AST is ill-scoped, and thus exhibits scope extrusion. It will be used as a running example.}}{24}{listing.8}\protected@file@percent }
\newlabel{listing:efflang-scope-extrusion}{{8}{24}{A \efflang {} program that evaluates to the $\Var {x}{\mathbb {N}}$. The AST is ill-scoped, and thus exhibits scope extrusion. It will be used as a running example}{listing.8}{}}
\newlabel{listing:efflang-scope-extrusion@cref}{{[listing][8][]8}{[1][24][]24}{}{}{}}
\citation{kiselyov-16,isoda-24}
\citation{kiselyov-14}
\@writefile{lol}{\contentsline {listing}{\numberline {9}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that may, or may not demonstrate scope extrusion, depending on one's definition. The final result of the program is well-scoped, but not all intermediate results are well-scoped. If scope extrusion is a property of the resulting AST, then this does not display scope extrusion. If, instead, it is a property of intermediate ASTs, then this does display scope extrusion.}}{25}{listing.9}\protected@file@percent }
\newlabel{listing:efflang-maybe-scope-extrusion}{{9}{25}{A \efflang {} program that may, or may not demonstrate scope extrusion, depending on one's definition. The final result of the program is well-scoped, but not all intermediate results are well-scoped. If scope extrusion is a property of the resulting AST, then this does not display scope extrusion. If, instead, it is a property of intermediate ASTs, then this does display scope extrusion}{listing.9}{}}
\newlabel{listing:efflang-maybe-scope-extrusion@cref}{{[listing][9][]9}{[1][25][]25}{}{}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Existing Solutions to the Scope Extrusion Problem}{25}{subsection.2.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Lazy Dynamic Check}{25}{subsubsection*.18}\protected@file@percent }
\citation{kiselyov-14}
\citation{kiselyov-14}
\@writefile{lol}{\contentsline {listing}{\numberline {10}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that evaluates to the $\texttt  {Var}(x_{\mathbb  {N}})$. Executing the entire program to determine if it exhibits scope extrusion is inefficient.}}{26}{listing.10}\protected@file@percent }
\newlabel{listing:efflang-lazy-scope-extrusion-inefficient}{{10}{26}{A \efflang {} program that evaluates to the $\Var {x}{\mathbb {N}}$. Executing the entire program to determine if it exhibits scope extrusion is inefficient}{listing.10}{}}
\newlabel{listing:efflang-lazy-scope-extrusion-inefficient@cref}{{[listing][10][]10}{[1][26][]26}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Eager Dynamic Check}{26}{subsubsection*.20}\protected@file@percent }
\@writefile{lol}{\contentsline {listing}{\numberline {11}{\ignorespaces A $\lambda _{\texttt  {op}}${} program that is a slight variation of \Cref  {listing:efflang-maybe-scope-extrusion}, but that (unlike \Cref  {listing:efflang-maybe-scope-extrusion}) passes the Eager Dynamic Check.}}{26}{listing.11}\protected@file@percent }
\newlabel{listing:efflang-maybe-not-scope-extrusion}{{11}{26}{A \efflang {} program that is a slight variation of \Cref {listing:efflang-maybe-scope-extrusion}, but that (unlike \Cref {listing:efflang-maybe-scope-extrusion}) passes the Eager Dynamic Check}{listing.11}{}}
\newlabel{listing:efflang-maybe-not-scope-extrusion@cref}{{[listing][11][]11}{[1][26][]26}{}{}{}}
\@writefile{toc}{\contentsline {subsubsection}{\nonumberline Refined Environment Classifiers}{27}{subsubsection*.22}\protected@file@percent }
\@setckpt{Chapters/Background/background}{
\setcounter{page}{28}
\setcounter{equation}{0}
\setcounter{enumi}{0}
\setcounter{enumii}{3}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{1}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{2}
\setcounter{section}{3}
\setcounter{subsection}{1}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{4}
\setcounter{table}{0}
\setcounter{section@level}{3}
\setcounter{Item}{15}
\setcounter{Hfootnote}{1}
\setcounter{bookmark@seq@number}{0}
\setcounter{parentequation}{0}
\setcounter{thmt@dummyctr}{0}
\setcounter{CPT@WriteCount}{0}
\setcounter{CPT@numB}{0}
\setcounter{NAT@ctr}{0}
\setcounter{lstnumber}{1}
\setcounter{float@type}{64}
\setcounter{algorithm}{0}
\setcounter{ALG@line}{0}
\setcounter{ALG@rem}{0}
\setcounter{ALG@nested}{0}
\setcounter{ALG@Lnr}{2}
\setcounter{ALG@blocknr}{10}
\setcounter{ALG@storecount}{0}
\setcounter{ALG@tmpcounter}{0}
\setcounter{FancyVerbLine}{1}
\setcounter{linenumber}{1}
\setcounter{LN@truepage}{27}
\setcounter{FancyVerbWriteLine}{0}
\setcounter{FancyVerbBufferLine}{0}
\setcounter{FV@TrueTabGroupLevel}{0}
\setcounter{FV@TrueTabCounter}{0}
\setcounter{FV@HighlightLinesStart}{0}
\setcounter{FV@HighlightLinesStop}{0}
\setcounter{FancyVerbLineBreakLast}{0}
\setcounter{FV@BreakBufferDepth}{0}
\setcounter{minted@FancyVerbLineTemp}{0}
\setcounter{listing}{11}
\setcounter{tcbbreakpart}{1}
\setcounter{tcblayer}{0}
\setcounter{tcolorbox@number}{37}
\setcounter{tcblisting}{22}
\setcounter{caption@flags}{2}
\setcounter{continuedfloat}{0}
\setcounter{lstlisting}{0}
}
